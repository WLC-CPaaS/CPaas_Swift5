//
// ModelsConfigFileParameter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelsConfigFileParameter: Codable, JSONEncodable, Hashable {

    public var _extension: String?
    public var httpsHost: String?
    public var httpsPassword: String?
    public var httpsUsername: String?
    public var macAddress: String?
    public var realm: String?
    public var sipPassword: String?
    public var sipUsername: String?
    public var timezone: String?
    public var voicemailBoxNumber: String?

    public init(_extension: String? = nil, httpsHost: String? = nil, httpsPassword: String? = nil, httpsUsername: String? = nil, macAddress: String? = nil, realm: String? = nil, sipPassword: String? = nil, sipUsername: String? = nil, timezone: String? = nil, voicemailBoxNumber: String? = nil) {
        self._extension = _extension
        self.httpsHost = httpsHost
        self.httpsPassword = httpsPassword
        self.httpsUsername = httpsUsername
        self.macAddress = macAddress
        self.realm = realm
        self.sipPassword = sipPassword
        self.sipUsername = sipUsername
        self.timezone = timezone
        self.voicemailBoxNumber = voicemailBoxNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _extension = "extension"
        case httpsHost = "https_host"
        case httpsPassword = "https_password"
        case httpsUsername = "https_username"
        case macAddress = "mac_address"
        case realm
        case sipPassword = "sip_password"
        case sipUsername = "sip_username"
        case timezone
        case voicemailBoxNumber = "voicemail_box_number"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_extension, forKey: ._extension)
        try container.encodeIfPresent(httpsHost, forKey: .httpsHost)
        try container.encodeIfPresent(httpsPassword, forKey: .httpsPassword)
        try container.encodeIfPresent(httpsUsername, forKey: .httpsUsername)
        try container.encodeIfPresent(macAddress, forKey: .macAddress)
        try container.encodeIfPresent(realm, forKey: .realm)
        try container.encodeIfPresent(sipPassword, forKey: .sipPassword)
        try container.encodeIfPresent(sipUsername, forKey: .sipUsername)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(voicemailBoxNumber, forKey: .voicemailBoxNumber)
    }
}

