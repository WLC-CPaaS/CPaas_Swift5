//
// ServiceMediaOutputFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceMediaOutputFull: Codable, JSONEncodable, Hashable {

    public var contentLength: Int?
    public var contentType: String?
    public var description: String?
    public var id: String?
    public var language: String?
    public var mediaSource: String?
    public var name: String?
    public var streamable: Bool?
    public var tts: ServiceTTS?

    public init(contentLength: Int? = nil, contentType: String? = nil, description: String? = nil, id: String? = nil, language: String? = nil, mediaSource: String? = nil, name: String? = nil, streamable: Bool? = nil, tts: ServiceTTS? = nil) {
        self.contentLength = contentLength
        self.contentType = contentType
        self.description = description
        self.id = id
        self.language = language
        self.mediaSource = mediaSource
        self.name = name
        self.streamable = streamable
        self.tts = tts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentLength = "content_length"
        case contentType = "content_type"
        case description
        case id
        case language
        case mediaSource = "media_source"
        case name
        case streamable
        case tts
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentLength, forKey: .contentLength)
        try container.encodeIfPresent(contentType, forKey: .contentType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(mediaSource, forKey: .mediaSource)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(streamable, forKey: .streamable)
        try container.encodeIfPresent(tts, forKey: .tts)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceMediaOutputFull: Identifiable {}
