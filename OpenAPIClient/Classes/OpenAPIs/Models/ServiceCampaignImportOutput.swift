//
// ServiceCampaignImportOutput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceCampaignImportOutput: Codable, JSONEncodable, Hashable {

    public var campaignId: String?
    public var createdDate: String?
    public var description: String?
    public var messageClass: String?
    public var mnoStatusList: [ServiceCampaignImportOutputMnoStatusListInner]?
    public var secondaryDcaSharingStatus: String?
    public var status: String?

    public init(campaignId: String? = nil, createdDate: String? = nil, description: String? = nil, messageClass: String? = nil, mnoStatusList: [ServiceCampaignImportOutputMnoStatusListInner]? = nil, secondaryDcaSharingStatus: String? = nil, status: String? = nil) {
        self.campaignId = campaignId
        self.createdDate = createdDate
        self.description = description
        self.messageClass = messageClass
        self.mnoStatusList = mnoStatusList
        self.secondaryDcaSharingStatus = secondaryDcaSharingStatus
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case campaignId = "campaign_id"
        case createdDate = "created_date"
        case description
        case messageClass = "message_class"
        case mnoStatusList = "mno_status_list"
        case secondaryDcaSharingStatus = "secondary_dca_sharing_status"
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(campaignId, forKey: .campaignId)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(messageClass, forKey: .messageClass)
        try container.encodeIfPresent(mnoStatusList, forKey: .mnoStatusList)
        try container.encodeIfPresent(secondaryDcaSharingStatus, forKey: .secondaryDcaSharingStatus)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

