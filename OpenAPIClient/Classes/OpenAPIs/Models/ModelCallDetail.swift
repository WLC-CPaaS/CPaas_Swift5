//
// ModelCallDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelCallDetail: Codable, JSONEncodable, Hashable {

    public var accountId: String?
    public var callDuration: String?
    public var callId: String?
    public var callTime: String?
    public var callType: String?
    public var calleeName: String?
    public var calleeNumber: String?
    public var callerName: String?
    public var callerNumber: String?
    public var createdAt: String?

    public init(accountId: String? = nil, callDuration: String? = nil, callId: String? = nil, callTime: String? = nil, callType: String? = nil, calleeName: String? = nil, calleeNumber: String? = nil, callerName: String? = nil, callerNumber: String? = nil, createdAt: String? = nil) {
        self.accountId = accountId
        self.callDuration = callDuration
        self.callId = callId
        self.callTime = callTime
        self.callType = callType
        self.calleeName = calleeName
        self.calleeNumber = calleeNumber
        self.callerName = callerName
        self.callerNumber = callerNumber
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case callDuration = "call_duration"
        case callId = "call_id"
        case callTime = "call_time"
        case callType = "call_type"
        case calleeName = "callee_name"
        case calleeNumber = "callee_number"
        case callerName = "caller_name"
        case callerNumber = "caller_number"
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(callDuration, forKey: .callDuration)
        try container.encodeIfPresent(callId, forKey: .callId)
        try container.encodeIfPresent(callTime, forKey: .callTime)
        try container.encodeIfPresent(callType, forKey: .callType)
        try container.encodeIfPresent(calleeName, forKey: .calleeName)
        try container.encodeIfPresent(calleeNumber, forKey: .calleeNumber)
        try container.encodeIfPresent(callerName, forKey: .callerName)
        try container.encodeIfPresent(callerNumber, forKey: .callerNumber)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

