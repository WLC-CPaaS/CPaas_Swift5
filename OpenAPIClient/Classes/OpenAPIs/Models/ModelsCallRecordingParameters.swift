//
// ModelsCallRecordingParameters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelsCallRecordingParameters: Codable, JSONEncodable, Hashable {

    public enum Format: String, Codable, CaseIterable {
        case mp3 = "mp3"
        case wav = "wav"
    }
    public static let timeLimitRule = NumericRule<Int>(minimum: 5, exclusiveMinimum: false, maximum: 10800, exclusiveMaximum: false, multipleOf: nil)
    public var enabled: Bool?
    public var format: Format?
    public var recordMinSec: Int?
    public var recordOnAnswer: Bool?
    public var recordOnBridge: Bool?
    public var recordSampleRate: Int?
    public var timeLimit: Int?
    public var url: String?

    public init(enabled: Bool? = nil, format: Format? = nil, recordMinSec: Int? = nil, recordOnAnswer: Bool? = nil, recordOnBridge: Bool? = nil, recordSampleRate: Int? = nil, timeLimit: Int? = nil, url: String? = nil) {
        self.enabled = enabled
        self.format = format
        self.recordMinSec = recordMinSec
        self.recordOnAnswer = recordOnAnswer
        self.recordOnBridge = recordOnBridge
        self.recordSampleRate = recordSampleRate
        self.timeLimit = timeLimit
        self.url = url
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enabled
        case format
        case recordMinSec = "record_min_sec"
        case recordOnAnswer = "record_on_answer"
        case recordOnBridge = "record_on_bridge"
        case recordSampleRate = "record_sample_rate"
        case timeLimit = "time_limit"
        case url
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(recordMinSec, forKey: .recordMinSec)
        try container.encodeIfPresent(recordOnAnswer, forKey: .recordOnAnswer)
        try container.encodeIfPresent(recordOnBridge, forKey: .recordOnBridge)
        try container.encodeIfPresent(recordSampleRate, forKey: .recordSampleRate)
        try container.encodeIfPresent(timeLimit, forKey: .timeLimit)
        try container.encodeIfPresent(url, forKey: .url)
    }
}

