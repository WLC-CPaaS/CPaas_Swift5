//
// ServiceImpersonateUserOutputFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceImpersonateUserOutputFull: Codable, JSONEncodable, Hashable {

    public var accountId: String?
    public var accountName: String?
    public var authToken: String?
    public var clusterId: String?
    public var isMasterAccount: Bool?
    public var isReseller: Bool?
    public var ownerId: String?
    public var resellerId: String?
    public var userInfo: ServiceImpersonatedUserInfo?

    public init(accountId: String? = nil, accountName: String? = nil, authToken: String? = nil, clusterId: String? = nil, isMasterAccount: Bool? = nil, isReseller: Bool? = nil, ownerId: String? = nil, resellerId: String? = nil, userInfo: ServiceImpersonatedUserInfo? = nil) {
        self.accountId = accountId
        self.accountName = accountName
        self.authToken = authToken
        self.clusterId = clusterId
        self.isMasterAccount = isMasterAccount
        self.isReseller = isReseller
        self.ownerId = ownerId
        self.resellerId = resellerId
        self.userInfo = userInfo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case accountName = "account_name"
        case authToken = "auth_token"
        case clusterId = "cluster_id"
        case isMasterAccount = "is_master_account"
        case isReseller = "is_reseller"
        case ownerId = "owner_id"
        case resellerId = "reseller_id"
        case userInfo = "user_info"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(accountName, forKey: .accountName)
        try container.encodeIfPresent(authToken, forKey: .authToken)
        try container.encodeIfPresent(clusterId, forKey: .clusterId)
        try container.encodeIfPresent(isMasterAccount, forKey: .isMasterAccount)
        try container.encodeIfPresent(isReseller, forKey: .isReseller)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(resellerId, forKey: .resellerId)
        try container.encodeIfPresent(userInfo, forKey: .userInfo)
    }
}

