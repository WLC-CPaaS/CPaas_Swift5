//
// ServiceParkingSlotData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceParkingSlotData: Codable, JSONEncodable, Hashable {

    public var attended: Bool?
    public var callId: String?
    public var cidName: String?
    public var cidNumber: String?
    public var cidUri: String?
    public var fromTag: String?
    public var node: String?
    public var presenceId: String?
    public var presenceRealm: String?
    public var presenceType: String?
    public var presenceUser: String?
    public var ringbackId: String?
    public var slotCallId: String?
    public var switchUri: String?
    public var toTag: String?

    public init(attended: Bool? = nil, callId: String? = nil, cidName: String? = nil, cidNumber: String? = nil, cidUri: String? = nil, fromTag: String? = nil, node: String? = nil, presenceId: String? = nil, presenceRealm: String? = nil, presenceType: String? = nil, presenceUser: String? = nil, ringbackId: String? = nil, slotCallId: String? = nil, switchUri: String? = nil, toTag: String? = nil) {
        self.attended = attended
        self.callId = callId
        self.cidName = cidName
        self.cidNumber = cidNumber
        self.cidUri = cidUri
        self.fromTag = fromTag
        self.node = node
        self.presenceId = presenceId
        self.presenceRealm = presenceRealm
        self.presenceType = presenceType
        self.presenceUser = presenceUser
        self.ringbackId = ringbackId
        self.slotCallId = slotCallId
        self.switchUri = switchUri
        self.toTag = toTag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attended
        case callId = "call_id"
        case cidName = "cid_name"
        case cidNumber = "cid_number"
        case cidUri = "cid_uri"
        case fromTag = "from_tag"
        case node
        case presenceId = "presence_id"
        case presenceRealm = "presence_realm"
        case presenceType = "presence_type"
        case presenceUser = "presence_user"
        case ringbackId = "ringback_id"
        case slotCallId = "slot_call_id"
        case switchUri = "switch_uri"
        case toTag = "to_tag"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attended, forKey: .attended)
        try container.encodeIfPresent(callId, forKey: .callId)
        try container.encodeIfPresent(cidName, forKey: .cidName)
        try container.encodeIfPresent(cidNumber, forKey: .cidNumber)
        try container.encodeIfPresent(cidUri, forKey: .cidUri)
        try container.encodeIfPresent(fromTag, forKey: .fromTag)
        try container.encodeIfPresent(node, forKey: .node)
        try container.encodeIfPresent(presenceId, forKey: .presenceId)
        try container.encodeIfPresent(presenceRealm, forKey: .presenceRealm)
        try container.encodeIfPresent(presenceType, forKey: .presenceType)
        try container.encodeIfPresent(presenceUser, forKey: .presenceUser)
        try container.encodeIfPresent(ringbackId, forKey: .ringbackId)
        try container.encodeIfPresent(slotCallId, forKey: .slotCallId)
        try container.encodeIfPresent(switchUri, forKey: .switchUri)
        try container.encodeIfPresent(toTag, forKey: .toTag)
    }
}

