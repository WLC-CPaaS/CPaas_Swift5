//
// ServiceUserOutputShort.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceUserOutputShort: Codable, JSONEncodable, Hashable {

    public var callRecording: ModelsCallRecordingSettings?
    public var doNotDisturb: ModelsVOIPSharedDoNotDisturb?
    public var email: String?
    public var enabled: Bool?
    public var features: [String]?
    public var firstName: String?
    public var flags: [String]?
    public var id: String?
    public var lastName: String?
    public var presenceId: String?

    public init(callRecording: ModelsCallRecordingSettings? = nil, doNotDisturb: ModelsVOIPSharedDoNotDisturb? = nil, email: String? = nil, enabled: Bool? = nil, features: [String]? = nil, firstName: String? = nil, flags: [String]? = nil, id: String? = nil, lastName: String? = nil, presenceId: String? = nil) {
        self.callRecording = callRecording
        self.doNotDisturb = doNotDisturb
        self.email = email
        self.enabled = enabled
        self.features = features
        self.firstName = firstName
        self.flags = flags
        self.id = id
        self.lastName = lastName
        self.presenceId = presenceId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callRecording = "call_recording"
        case doNotDisturb = "do_not_disturb"
        case email
        case enabled
        case features
        case firstName = "first_name"
        case flags
        case id
        case lastName = "last_name"
        case presenceId = "presence_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(callRecording, forKey: .callRecording)
        try container.encodeIfPresent(doNotDisturb, forKey: .doNotDisturb)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(features, forKey: .features)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(flags, forKey: .flags)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(presenceId, forKey: .presenceId)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceUserOutputShort: Identifiable {}
