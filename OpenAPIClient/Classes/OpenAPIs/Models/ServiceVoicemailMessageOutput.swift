//
// ServiceVoicemailMessageOutput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceVoicemailMessageOutput: Codable, JSONEncodable, Hashable {

    public var callId: String?
    public var callerIdName: String?
    public var callerIdNumber: String?
    public var folder: String?
    public var from: String?
    public var length: Int?
    public var mediaId: String?
    public var succeeded: [String]?
    public var timestamp: Int?
    public var to: String?

    public init(callId: String? = nil, callerIdName: String? = nil, callerIdNumber: String? = nil, folder: String? = nil, from: String? = nil, length: Int? = nil, mediaId: String? = nil, succeeded: [String]? = nil, timestamp: Int? = nil, to: String? = nil) {
        self.callId = callId
        self.callerIdName = callerIdName
        self.callerIdNumber = callerIdNumber
        self.folder = folder
        self.from = from
        self.length = length
        self.mediaId = mediaId
        self.succeeded = succeeded
        self.timestamp = timestamp
        self.to = to
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callId = "call_id"
        case callerIdName = "caller_id_name"
        case callerIdNumber = "caller_id_number"
        case folder
        case from
        case length
        case mediaId = "media_id"
        case succeeded
        case timestamp
        case to
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(callId, forKey: .callId)
        try container.encodeIfPresent(callerIdName, forKey: .callerIdName)
        try container.encodeIfPresent(callerIdNumber, forKey: .callerIdNumber)
        try container.encodeIfPresent(folder, forKey: .folder)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(mediaId, forKey: .mediaId)
        try container.encodeIfPresent(succeeded, forKey: .succeeded)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(to, forKey: .to)
    }
}

