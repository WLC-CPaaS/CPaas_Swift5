//
// ServiceVOIPTemporalRuleAddEdit2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceVOIPTemporalRuleAddEdit2: Codable, JSONEncodable, Hashable {

    public enum Cycle: String, Codable, CaseIterable {
        case date = "date"
        case daily = "daily"
        case weekly = "weekly"
        case monthly = "monthly"
        case yearly = "yearly"
    }
    public enum Ordinal: String, Codable, CaseIterable {
        case every = "every"
        case first = "first"
        case second = "second"
        case third = "third"
        case fourth = "fourth"
        case fifth = "fifth"
        case last = "last"
    }
    public static let intervalRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let monthRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 12, exclusiveMaximum: false, multipleOf: nil)
    public static let nameRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public static let timeWindowStartRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400, exclusiveMaximum: false, multipleOf: nil)
    public static let timeWindowStopRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 86400, exclusiveMaximum: false, multipleOf: nil)
    public var cycle: Cycle
    public var days: [Int]?
    public var enabled: Bool?
    public var interval: Int?
    public var month: Int?
    public var name: String
    public var ordinal: Ordinal?
    public var startDate: Int?
    public var startDateReq: String?
    public var timeWindowStart: Int?
    public var timeWindowStartReq: String?
    public var timeWindowStop: Int?
    public var timeWindowStopReq: String?
    public var wdays: [String]?

    public init(cycle: Cycle, days: [Int]? = nil, enabled: Bool? = nil, interval: Int? = nil, month: Int? = nil, name: String, ordinal: Ordinal? = nil, startDate: Int? = nil, startDateReq: String? = nil, timeWindowStart: Int? = nil, timeWindowStartReq: String? = nil, timeWindowStop: Int? = nil, timeWindowStopReq: String? = nil, wdays: [String]? = nil) {
        self.cycle = cycle
        self.days = days
        self.enabled = enabled
        self.interval = interval
        self.month = month
        self.name = name
        self.ordinal = ordinal
        self.startDate = startDate
        self.startDateReq = startDateReq
        self.timeWindowStart = timeWindowStart
        self.timeWindowStartReq = timeWindowStartReq
        self.timeWindowStop = timeWindowStop
        self.timeWindowStopReq = timeWindowStopReq
        self.wdays = wdays
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cycle
        case days
        case enabled
        case interval
        case month
        case name
        case ordinal
        case startDate = "start_date"
        case startDateReq = "start_date_req"
        case timeWindowStart = "time_window_start"
        case timeWindowStartReq = "time_window_start_req"
        case timeWindowStop = "time_window_stop"
        case timeWindowStopReq = "time_window_stop_req"
        case wdays
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cycle, forKey: .cycle)
        try container.encodeIfPresent(days, forKey: .days)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(interval, forKey: .interval)
        try container.encodeIfPresent(month, forKey: .month)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(startDateReq, forKey: .startDateReq)
        try container.encodeIfPresent(timeWindowStart, forKey: .timeWindowStart)
        try container.encodeIfPresent(timeWindowStartReq, forKey: .timeWindowStartReq)
        try container.encodeIfPresent(timeWindowStop, forKey: .timeWindowStop)
        try container.encodeIfPresent(timeWindowStopReq, forKey: .timeWindowStopReq)
        try container.encodeIfPresent(wdays, forKey: .wdays)
    }
}

