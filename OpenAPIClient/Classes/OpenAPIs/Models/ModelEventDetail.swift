//
// ModelEventDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelEventDetail: Codable, JSONEncodable, Hashable {

    public var accountId: String?
    public var component: String?
    public var createdAt: String?
    public var eventName: String?
    public var execStatus: String?
    public var logDate: String?
    public var logTime: String?
    public var username: String?

    public init(accountId: String? = nil, component: String? = nil, createdAt: String? = nil, eventName: String? = nil, execStatus: String? = nil, logDate: String? = nil, logTime: String? = nil, username: String? = nil) {
        self.accountId = accountId
        self.component = component
        self.createdAt = createdAt
        self.eventName = eventName
        self.execStatus = execStatus
        self.logDate = logDate
        self.logTime = logTime
        self.username = username
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case component
        case createdAt = "created_at"
        case eventName = "event_name"
        case execStatus = "exec_status"
        case logDate = "log_date"
        case logTime = "log_time"
        case username
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(component, forKey: .component)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(eventName, forKey: .eventName)
        try container.encodeIfPresent(execStatus, forKey: .execStatus)
        try container.encodeIfPresent(logDate, forKey: .logDate)
        try container.encodeIfPresent(logTime, forKey: .logTime)
        try container.encodeIfPresent(username, forKey: .username)
    }
}

