//
// ServiceDocsGetQueueRecipients.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceDocsGetQueueRecipients: Codable, JSONEncodable, Hashable {

    public var data: ServiceQueueRecipientOutput?
    /** List Pagination: Used to get the next page of results. Will not exist if this is the last page. */
    public var nextStartKey: String?
    /** List Pagination: The number of results returned in this page */
    public var pageSize: Int?
    /** Unique id for each request */
    public var requestId: String?
    /** List Pagination: Code for paged results */
    public var startKey: String?
    /** HTTP response status code */
    public var statusCode: Int?

    public init(data: ServiceQueueRecipientOutput? = nil, nextStartKey: String? = nil, pageSize: Int? = nil, requestId: String? = nil, startKey: String? = nil, statusCode: Int? = nil) {
        self.data = data
        self.nextStartKey = nextStartKey
        self.pageSize = pageSize
        self.requestId = requestId
        self.startKey = startKey
        self.statusCode = statusCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case data
        case nextStartKey = "next_start_key"
        case pageSize = "page_size"
        case requestId = "request_id"
        case startKey = "start_key"
        case statusCode = "status_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(nextStartKey, forKey: .nextStartKey)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(requestId, forKey: .requestId)
        try container.encodeIfPresent(startKey, forKey: .startKey)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
    }
}

