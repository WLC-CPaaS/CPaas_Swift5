//
// ServiceVOIPDeviceAddEdit2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceVOIPDeviceAddEdit2: Codable, JSONEncodable, Hashable {

    public enum DeviceType: String, Codable, CaseIterable {
        case softphone = "softphone"
        case sipUri = "sip_uri"
        case sipDevice = "sip_device"
    }
    public static let nameRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public var callForward: ModelsCallForward?
    public var callerId: ServiceVOIPDeviceAddEdit3c?
    public var deviceType: DeviceType?
    public var doNotDisturb: ModelsVOIPSharedDoNotDisturb?
    /** cannot use required, else it has to be true and false is not allowed */
    public var enabled: Bool?
    /** dont use mac, it enforces :, which voip does not like */
    public var macAddress: String?
    public var media: ServiceVOIPDeviceAddEdit3d?
    public var musicOnHold: ModelsMusicOnHold?
    public var name: String
    /** json omitempty is needed else voip fails on \"\" for owner_id */
    public var ownerId: String?
    public var provision: ServiceVOIPDeviceAddEditProvision?
    public var sip: ServiceVOIPDeviceAddEdit3a

    public init(callForward: ModelsCallForward? = nil, callerId: ServiceVOIPDeviceAddEdit3c? = nil, deviceType: DeviceType? = nil, doNotDisturb: ModelsVOIPSharedDoNotDisturb? = nil, enabled: Bool? = nil, macAddress: String? = nil, media: ServiceVOIPDeviceAddEdit3d? = nil, musicOnHold: ModelsMusicOnHold? = nil, name: String, ownerId: String? = nil, provision: ServiceVOIPDeviceAddEditProvision? = nil, sip: ServiceVOIPDeviceAddEdit3a) {
        self.callForward = callForward
        self.callerId = callerId
        self.deviceType = deviceType
        self.doNotDisturb = doNotDisturb
        self.enabled = enabled
        self.macAddress = macAddress
        self.media = media
        self.musicOnHold = musicOnHold
        self.name = name
        self.ownerId = ownerId
        self.provision = provision
        self.sip = sip
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callForward = "call_forward"
        case callerId = "caller_id"
        case deviceType = "device_type"
        case doNotDisturb = "do_not_disturb"
        case enabled
        case macAddress = "mac_address"
        case media
        case musicOnHold = "music_on_hold"
        case name
        case ownerId = "owner_id"
        case provision
        case sip
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(callForward, forKey: .callForward)
        try container.encodeIfPresent(callerId, forKey: .callerId)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(doNotDisturb, forKey: .doNotDisturb)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(macAddress, forKey: .macAddress)
        try container.encodeIfPresent(media, forKey: .media)
        try container.encodeIfPresent(musicOnHold, forKey: .musicOnHold)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(provision, forKey: .provision)
        try container.encode(sip, forKey: .sip)
    }
}

