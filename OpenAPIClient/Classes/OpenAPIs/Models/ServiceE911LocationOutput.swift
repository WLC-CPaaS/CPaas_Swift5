//
// ServiceE911LocationOutput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceE911LocationOutput: Codable, JSONEncodable, Hashable {

    public var activatedTime: String?
    public var address1: String?
    public var address2: String?
    public var callerName: String?
    public var comments: String?
    public var community: String?
    public var customerOrderId: String?
    public var latitude: Double?
    public var legacyData: ServiceE911LegacyDataOutput?
    public var locationId: String?
    public var longitude: Double?
    public var plusFour: String?
    public var postalCode: String?
    public var state: String?
    public var status: ServiceE911StatusOutput?
    public var type: String?
    public var updateTime: String?

    public init(activatedTime: String? = nil, address1: String? = nil, address2: String? = nil, callerName: String? = nil, comments: String? = nil, community: String? = nil, customerOrderId: String? = nil, latitude: Double? = nil, legacyData: ServiceE911LegacyDataOutput? = nil, locationId: String? = nil, longitude: Double? = nil, plusFour: String? = nil, postalCode: String? = nil, state: String? = nil, status: ServiceE911StatusOutput? = nil, type: String? = nil, updateTime: String? = nil) {
        self.activatedTime = activatedTime
        self.address1 = address1
        self.address2 = address2
        self.callerName = callerName
        self.comments = comments
        self.community = community
        self.customerOrderId = customerOrderId
        self.latitude = latitude
        self.legacyData = legacyData
        self.locationId = locationId
        self.longitude = longitude
        self.plusFour = plusFour
        self.postalCode = postalCode
        self.state = state
        self.status = status
        self.type = type
        self.updateTime = updateTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activatedTime = "activated_time"
        case address1 = "address_1"
        case address2 = "address_2"
        case callerName = "caller_name"
        case comments
        case community
        case customerOrderId = "customer_order_id"
        case latitude
        case legacyData = "legacy_data"
        case locationId = "location_id"
        case longitude
        case plusFour = "plus_four"
        case postalCode = "postal_code"
        case state
        case status
        case type
        case updateTime = "update_time"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activatedTime, forKey: .activatedTime)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(callerName, forKey: .callerName)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(community, forKey: .community)
        try container.encodeIfPresent(customerOrderId, forKey: .customerOrderId)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(legacyData, forKey: .legacyData)
        try container.encodeIfPresent(locationId, forKey: .locationId)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(plusFour, forKey: .plusFour)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updateTime, forKey: .updateTime)
    }
}

