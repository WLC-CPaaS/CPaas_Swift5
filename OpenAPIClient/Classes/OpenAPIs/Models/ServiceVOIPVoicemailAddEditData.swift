//
// ServiceVOIPVoicemailAddEditData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceVOIPVoicemailAddEditData: Codable, JSONEncodable, Hashable {

    public enum MediaExtension: String, Codable, CaseIterable {
        case mp3 = "mp3"
        case mp4 = "mp4"
        case wav = "wav"
    }
    public static let mailboxRule = StringRule(minLength: nil, maxLength: 30, pattern: nil)
    public static let nameRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public static let pinRule = StringRule(minLength: 4, maxLength: 6, pattern: nil)
    public static let timezoneRule = StringRule(minLength: 5, maxLength: 32, pattern: nil)
    public var mailbox: String
    public var media: ServiceVoicemailMedia?
    public var mediaExtension: MediaExtension?
    public var name: String
    public var ownerId: String?
    public var pin: String?
    public var requirePin: Bool?
    public var timezone: String?

    public init(mailbox: String, media: ServiceVoicemailMedia? = nil, mediaExtension: MediaExtension? = nil, name: String, ownerId: String? = nil, pin: String? = nil, requirePin: Bool? = nil, timezone: String? = nil) {
        self.mailbox = mailbox
        self.media = media
        self.mediaExtension = mediaExtension
        self.name = name
        self.ownerId = ownerId
        self.pin = pin
        self.requirePin = requirePin
        self.timezone = timezone
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mailbox
        case media
        case mediaExtension = "media_extension"
        case name
        case ownerId = "owner_id"
        case pin
        case requirePin = "require_pin"
        case timezone
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(mailbox, forKey: .mailbox)
        try container.encodeIfPresent(media, forKey: .media)
        try container.encodeIfPresent(mediaExtension, forKey: .mediaExtension)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(pin, forKey: .pin)
        try container.encodeIfPresent(requirePin, forKey: .requirePin)
        try container.encodeIfPresent(timezone, forKey: .timezone)
    }
}

