//
// ServiceE911LocationURI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceE911LocationURI: Codable, JSONEncodable, Hashable {

    public var activatedTime: String?
    public var address1: String?
    public var address2: String?
    public var callerName: String?
    public var comments: String?
    public var community: String?
    public var customerOrderID: String?
    public var latitude: Double?
    public var legacyData: ServiceE911LocationURILegacyData?
    public var locationID: String?
    public var longitude: Double?
    public var plusFour: String?
    public var postalCode: String?
    public var state: String?
    public var status: ServiceE911LocationURIStatus?
    public var type: String?
    public var updateTime: String?

    public init(activatedTime: String? = nil, address1: String? = nil, address2: String? = nil, callerName: String? = nil, comments: String? = nil, community: String? = nil, customerOrderID: String? = nil, latitude: Double? = nil, legacyData: ServiceE911LocationURILegacyData? = nil, locationID: String? = nil, longitude: Double? = nil, plusFour: String? = nil, postalCode: String? = nil, state: String? = nil, status: ServiceE911LocationURIStatus? = nil, type: String? = nil, updateTime: String? = nil) {
        self.activatedTime = activatedTime
        self.address1 = address1
        self.address2 = address2
        self.callerName = callerName
        self.comments = comments
        self.community = community
        self.customerOrderID = customerOrderID
        self.latitude = latitude
        self.legacyData = legacyData
        self.locationID = locationID
        self.longitude = longitude
        self.plusFour = plusFour
        self.postalCode = postalCode
        self.state = state
        self.status = status
        self.type = type
        self.updateTime = updateTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activatedTime
        case address1
        case address2
        case callerName
        case comments
        case community
        case customerOrderID
        case latitude
        case legacyData
        case locationID
        case longitude
        case plusFour
        case postalCode
        case state
        case status
        case type
        case updateTime
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(activatedTime, forKey: .activatedTime)
        try container.encodeIfPresent(address1, forKey: .address1)
        try container.encodeIfPresent(address2, forKey: .address2)
        try container.encodeIfPresent(callerName, forKey: .callerName)
        try container.encodeIfPresent(comments, forKey: .comments)
        try container.encodeIfPresent(community, forKey: .community)
        try container.encodeIfPresent(customerOrderID, forKey: .customerOrderID)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(legacyData, forKey: .legacyData)
        try container.encodeIfPresent(locationID, forKey: .locationID)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(plusFour, forKey: .plusFour)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(updateTime, forKey: .updateTime)
    }
}

