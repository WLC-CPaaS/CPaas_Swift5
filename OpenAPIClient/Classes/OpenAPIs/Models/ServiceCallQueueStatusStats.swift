//
// ServiceCallQueueStatusStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceCallQueueStatusStats: Codable, JSONEncodable, Hashable {

    public var abandonedSessions: Int?
    public var activeSessionCount: Int?
    public var averageWait: Int?
    public var estimatedWait: Int?
    public var longestWait: Int?
    public var missedSessions: Int?
    public var recipientCount: Int?
    public var totalSessions: Int?

    public init(abandonedSessions: Int? = nil, activeSessionCount: Int? = nil, averageWait: Int? = nil, estimatedWait: Int? = nil, longestWait: Int? = nil, missedSessions: Int? = nil, recipientCount: Int? = nil, totalSessions: Int? = nil) {
        self.abandonedSessions = abandonedSessions
        self.activeSessionCount = activeSessionCount
        self.averageWait = averageWait
        self.estimatedWait = estimatedWait
        self.longestWait = longestWait
        self.missedSessions = missedSessions
        self.recipientCount = recipientCount
        self.totalSessions = totalSessions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case abandonedSessions = "abandoned_sessions"
        case activeSessionCount = "active_session_count"
        case averageWait = "average_wait"
        case estimatedWait = "estimated_wait"
        case longestWait = "longest_wait"
        case missedSessions = "missed_sessions"
        case recipientCount = "recipient_count"
        case totalSessions = "total_sessions"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(abandonedSessions, forKey: .abandonedSessions)
        try container.encodeIfPresent(activeSessionCount, forKey: .activeSessionCount)
        try container.encodeIfPresent(averageWait, forKey: .averageWait)
        try container.encodeIfPresent(estimatedWait, forKey: .estimatedWait)
        try container.encodeIfPresent(longestWait, forKey: .longestWait)
        try container.encodeIfPresent(missedSessions, forKey: .missedSessions)
        try container.encodeIfPresent(recipientCount, forKey: .recipientCount)
        try container.encodeIfPresent(totalSessions, forKey: .totalSessions)
    }
}

