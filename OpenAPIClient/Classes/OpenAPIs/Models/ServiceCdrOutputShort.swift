//
// ServiceCdrOutputShort.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceCdrOutputShort: Codable, JSONEncodable, Hashable {

    public var authorizingId: String?
    public var billingSeconds: Int?
    public var bridgeId: String?
    public var callId: String?
    public var callPriority: String?
    public var callType: String?
    public var calleeIdName: String?
    public var calleeIdNumber: String?
    public var callerIdName: String?
    public var callerIdNumber: String?
    public var callingFrom: String?
    public var cost: String?
    public var dialedNumber: String?
    public var direction: String?
    public var durationSeconds: Int?
    public var from: String?
    public var hangupCause: String?
    public var id: String?
    public var interactionId: String?
    public var mediaRecordings: [AnyCodable]?
    public var mediaServer: String?
    public var otherLegCallId: String?
    public var ownerId: String?
    public var rate: String?
    public var rateName: String?
    public var recordingUrl: String?
    public var request: String?
    public var timestamp: Int?
    public var timestampDatetime: String?
    public var to: String?

    public init(authorizingId: String? = nil, billingSeconds: Int? = nil, bridgeId: String? = nil, callId: String? = nil, callPriority: String? = nil, callType: String? = nil, calleeIdName: String? = nil, calleeIdNumber: String? = nil, callerIdName: String? = nil, callerIdNumber: String? = nil, callingFrom: String? = nil, cost: String? = nil, dialedNumber: String? = nil, direction: String? = nil, durationSeconds: Int? = nil, from: String? = nil, hangupCause: String? = nil, id: String? = nil, interactionId: String? = nil, mediaRecordings: [AnyCodable]? = nil, mediaServer: String? = nil, otherLegCallId: String? = nil, ownerId: String? = nil, rate: String? = nil, rateName: String? = nil, recordingUrl: String? = nil, request: String? = nil, timestamp: Int? = nil, timestampDatetime: String? = nil, to: String? = nil) {
        self.authorizingId = authorizingId
        self.billingSeconds = billingSeconds
        self.bridgeId = bridgeId
        self.callId = callId
        self.callPriority = callPriority
        self.callType = callType
        self.calleeIdName = calleeIdName
        self.calleeIdNumber = calleeIdNumber
        self.callerIdName = callerIdName
        self.callerIdNumber = callerIdNumber
        self.callingFrom = callingFrom
        self.cost = cost
        self.dialedNumber = dialedNumber
        self.direction = direction
        self.durationSeconds = durationSeconds
        self.from = from
        self.hangupCause = hangupCause
        self.id = id
        self.interactionId = interactionId
        self.mediaRecordings = mediaRecordings
        self.mediaServer = mediaServer
        self.otherLegCallId = otherLegCallId
        self.ownerId = ownerId
        self.rate = rate
        self.rateName = rateName
        self.recordingUrl = recordingUrl
        self.request = request
        self.timestamp = timestamp
        self.timestampDatetime = timestampDatetime
        self.to = to
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authorizingId = "authorizing_id"
        case billingSeconds = "billing_seconds"
        case bridgeId = "bridge_id"
        case callId = "call_id"
        case callPriority = "call_priority"
        case callType = "call_type"
        case calleeIdName = "callee_id_name"
        case calleeIdNumber = "callee_id_number"
        case callerIdName = "caller_id_name"
        case callerIdNumber = "caller_id_number"
        case callingFrom = "calling_from"
        case cost
        case dialedNumber = "dialed_number"
        case direction
        case durationSeconds = "duration_seconds"
        case from
        case hangupCause = "hangup_cause"
        case id
        case interactionId = "interaction_id"
        case mediaRecordings = "media_recordings"
        case mediaServer = "media_server"
        case otherLegCallId = "other_leg_call_id"
        case ownerId = "owner_id"
        case rate
        case rateName = "rate_name"
        case recordingUrl = "recording_url"
        case request
        case timestamp
        case timestampDatetime = "timestamp_datetime"
        case to
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authorizingId, forKey: .authorizingId)
        try container.encodeIfPresent(billingSeconds, forKey: .billingSeconds)
        try container.encodeIfPresent(bridgeId, forKey: .bridgeId)
        try container.encodeIfPresent(callId, forKey: .callId)
        try container.encodeIfPresent(callPriority, forKey: .callPriority)
        try container.encodeIfPresent(callType, forKey: .callType)
        try container.encodeIfPresent(calleeIdName, forKey: .calleeIdName)
        try container.encodeIfPresent(calleeIdNumber, forKey: .calleeIdNumber)
        try container.encodeIfPresent(callerIdName, forKey: .callerIdName)
        try container.encodeIfPresent(callerIdNumber, forKey: .callerIdNumber)
        try container.encodeIfPresent(callingFrom, forKey: .callingFrom)
        try container.encodeIfPresent(cost, forKey: .cost)
        try container.encodeIfPresent(dialedNumber, forKey: .dialedNumber)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(durationSeconds, forKey: .durationSeconds)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(hangupCause, forKey: .hangupCause)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(interactionId, forKey: .interactionId)
        try container.encodeIfPresent(mediaRecordings, forKey: .mediaRecordings)
        try container.encodeIfPresent(mediaServer, forKey: .mediaServer)
        try container.encodeIfPresent(otherLegCallId, forKey: .otherLegCallId)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(rate, forKey: .rate)
        try container.encodeIfPresent(rateName, forKey: .rateName)
        try container.encodeIfPresent(recordingUrl, forKey: .recordingUrl)
        try container.encodeIfPresent(request, forKey: .request)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(timestampDatetime, forKey: .timestampDatetime)
        try container.encodeIfPresent(to, forKey: .to)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceCdrOutputShort: Identifiable {}
