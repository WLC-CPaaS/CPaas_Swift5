//
// ModelsUserOutputFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelsUserOutputFull: Codable, JSONEncodable, Hashable {

    public var callForward: ModelsCallForward?
    public var callRecording: ModelsCallRecordingSettings?
    public var callerId: ModelsUserOutputFullCallerid?
    public var doNotDisturb: ModelsVOIPSharedDoNotDisturb?
    public var email: String?
    public var enabled: Bool?
    public var firstName: String?
    public var id: String?
    public var lastName: String?
    public var musicOnHold: ModelsMusicOnHold?
    public var presenceId: String?
    public var timezone: String?
    public var verified: Bool?

    public init(callForward: ModelsCallForward? = nil, callRecording: ModelsCallRecordingSettings? = nil, callerId: ModelsUserOutputFullCallerid? = nil, doNotDisturb: ModelsVOIPSharedDoNotDisturb? = nil, email: String? = nil, enabled: Bool? = nil, firstName: String? = nil, id: String? = nil, lastName: String? = nil, musicOnHold: ModelsMusicOnHold? = nil, presenceId: String? = nil, timezone: String? = nil, verified: Bool? = nil) {
        self.callForward = callForward
        self.callRecording = callRecording
        self.callerId = callerId
        self.doNotDisturb = doNotDisturb
        self.email = email
        self.enabled = enabled
        self.firstName = firstName
        self.id = id
        self.lastName = lastName
        self.musicOnHold = musicOnHold
        self.presenceId = presenceId
        self.timezone = timezone
        self.verified = verified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callForward = "call_forward"
        case callRecording = "call_recording"
        case callerId = "caller_id"
        case doNotDisturb = "do_not_disturb"
        case email
        case enabled
        case firstName = "first_name"
        case id
        case lastName = "last_name"
        case musicOnHold = "music_on_hold"
        case presenceId = "presence_id"
        case timezone
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(callForward, forKey: .callForward)
        try container.encodeIfPresent(callRecording, forKey: .callRecording)
        try container.encodeIfPresent(callerId, forKey: .callerId)
        try container.encodeIfPresent(doNotDisturb, forKey: .doNotDisturb)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(musicOnHold, forKey: .musicOnHold)
        try container.encodeIfPresent(presenceId, forKey: .presenceId)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(verified, forKey: .verified)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ModelsUserOutputFull: Identifiable {}
