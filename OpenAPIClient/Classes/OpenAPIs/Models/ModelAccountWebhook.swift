//
// ModelAccountWebhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ModelAccountWebhook: Codable, JSONEncodable, Hashable {

    public var accountId: String?
    public var callbackMethod: String?
    public var callbackUrl: String?
    public var createdAt: String?
    public var data: [String: AnyCodable]?
    public var id: String?
    public var isActive: Bool?
    public var title: String?
    public var updatedAt: String?
    public var webhookType: String?

    public init(accountId: String? = nil, callbackMethod: String? = nil, callbackUrl: String? = nil, createdAt: String? = nil, data: [String: AnyCodable]? = nil, id: String? = nil, isActive: Bool? = nil, title: String? = nil, updatedAt: String? = nil, webhookType: String? = nil) {
        self.accountId = accountId
        self.callbackMethod = callbackMethod
        self.callbackUrl = callbackUrl
        self.createdAt = createdAt
        self.data = data
        self.id = id
        self.isActive = isActive
        self.title = title
        self.updatedAt = updatedAt
        self.webhookType = webhookType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accountId = "account_id"
        case callbackMethod = "callback_method"
        case callbackUrl = "callback_url"
        case createdAt = "created_at"
        case data
        case id
        case isActive = "is_active"
        case title
        case updatedAt = "updated_at"
        case webhookType = "webhook_type"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accountId, forKey: .accountId)
        try container.encodeIfPresent(callbackMethod, forKey: .callbackMethod)
        try container.encodeIfPresent(callbackUrl, forKey: .callbackUrl)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(webhookType, forKey: .webhookType)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ModelAccountWebhook: Identifiable {}
