//
// ServiceCallQueueOutputFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceCallQueueOutputFull: Codable, JSONEncodable, Hashable {

    public var agentWrapupTime: Int?
    public var features: [String: AnyCodable]?
    public var forceAwayOnReject: Bool?
    public var id: String?
    public var name: String?
    public var queueRouter: String?
    public var queueType: String?
    public var ringTimeout: Int?
    public var tickTime: Int?

    public init(agentWrapupTime: Int? = nil, features: [String: AnyCodable]? = nil, forceAwayOnReject: Bool? = nil, id: String? = nil, name: String? = nil, queueRouter: String? = nil, queueType: String? = nil, ringTimeout: Int? = nil, tickTime: Int? = nil) {
        self.agentWrapupTime = agentWrapupTime
        self.features = features
        self.forceAwayOnReject = forceAwayOnReject
        self.id = id
        self.name = name
        self.queueRouter = queueRouter
        self.queueType = queueType
        self.ringTimeout = ringTimeout
        self.tickTime = tickTime
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case agentWrapupTime = "agent_wrapup_time"
        case features
        case forceAwayOnReject = "force_away_on_reject"
        case id
        case name
        case queueRouter = "queue_router"
        case queueType = "queue_type"
        case ringTimeout = "ring_timeout"
        case tickTime = "tick_time"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(agentWrapupTime, forKey: .agentWrapupTime)
        try container.encodeIfPresent(features, forKey: .features)
        try container.encodeIfPresent(forceAwayOnReject, forKey: .forceAwayOnReject)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(queueRouter, forKey: .queueRouter)
        try container.encodeIfPresent(queueType, forKey: .queueType)
        try container.encodeIfPresent(ringTimeout, forKey: .ringTimeout)
        try container.encodeIfPresent(tickTime, forKey: .tickTime)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceCallQueueOutputFull: Identifiable {}
