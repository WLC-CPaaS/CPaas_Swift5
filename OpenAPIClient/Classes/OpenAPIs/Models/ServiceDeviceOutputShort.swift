//
// ServiceDeviceOutputShort.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ServiceDeviceOutputShort: Codable, JSONEncodable, Hashable {

    public var deviceType: String?
    public var doNotDisturb: ModelsVOIPSharedDoNotDisturb?
    public var enabled: Bool?
    public var features: [String]?
    public var flags: [String]?
    public var id: String?
    public var name: String?
    public var ownerId: String?
    public var username: String?

    public init(deviceType: String? = nil, doNotDisturb: ModelsVOIPSharedDoNotDisturb? = nil, enabled: Bool? = nil, features: [String]? = nil, flags: [String]? = nil, id: String? = nil, name: String? = nil, ownerId: String? = nil, username: String? = nil) {
        self.deviceType = deviceType
        self.doNotDisturb = doNotDisturb
        self.enabled = enabled
        self.features = features
        self.flags = flags
        self.id = id
        self.name = name
        self.ownerId = ownerId
        self.username = username
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case deviceType = "device_type"
        case doNotDisturb = "do_not_disturb"
        case enabled
        case features
        case flags
        case id
        case name
        case ownerId = "owner_id"
        case username
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(doNotDisturb, forKey: .doNotDisturb)
        try container.encodeIfPresent(enabled, forKey: .enabled)
        try container.encodeIfPresent(features, forKey: .features)
        try container.encodeIfPresent(flags, forKey: .flags)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(username, forKey: .username)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceDeviceOutputShort: Identifiable {}
