//
// GroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GroupAPI {

    /**
     Get Group List
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDGroupGet(accountID: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocGroupGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDGroupGetWithRequestBuilder(accountID: accountID, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Group List
     - GET /v1/account/{accountID}/group
     - Get a list of groups associated with an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocGroupGetAll> 
     */
    open class func v1AccountAccountIDGroupGetWithRequestBuilder(accountID: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocGroupGetAll> {
        var localVariablePath = "/v1/account/{accountID}/group"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocGroupGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Group
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) group ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDGroupGroupIDDelete(accountID: String, groupID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocGroupGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDGroupGroupIDDeleteWithRequestBuilder(accountID: accountID, groupID: groupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Group
     - DELETE /v1/account/{accountID}/group/{groupID}
     - Delete a call group in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) group ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocGroupGetSingle> 
     */
    open class func v1AccountAccountIDGroupGroupIDDeleteWithRequestBuilder(accountID: String, groupID: String) -> RequestBuilder<ServiceDocGroupGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/group/{groupID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let groupIDPreEscape = "\(APIHelper.mapValueToPathItem(groupID))"
        let groupIDPostEscape = groupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupID}", with: groupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocGroupGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Group Details
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) Group ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDGroupGroupIDGet(accountID: String, groupID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocGroupGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDGroupGroupIDGetWithRequestBuilder(accountID: accountID, groupID: groupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Group Details
     - GET /v1/account/{accountID}/group/{groupID}
     - Access details about a single group within an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) Group ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocGroupGetSingle> 
     */
    open class func v1AccountAccountIDGroupGroupIDGetWithRequestBuilder(accountID: String, groupID: String) -> RequestBuilder<ServiceDocGroupGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/group/{groupID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let groupIDPreEscape = "\(APIHelper.mapValueToPathItem(groupID))"
        let groupIDPostEscape = groupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupID}", with: groupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocGroupGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Group
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) Group ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDGroupGroupIDPut(accountID: String, groupID: String, reqBody: ServiceVOIPGroupAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocGroupGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDGroupGroupIDPutWithRequestBuilder(accountID: accountID, groupID: groupID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Group
     - PUT /v1/account/{accountID}/group/{groupID}
     - Modify the name, settings and other information for a group within an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter groupID: (path) Group ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocGroupGetSingle> 
     */
    open class func v1AccountAccountIDGroupGroupIDPutWithRequestBuilder(accountID: String, groupID: String, reqBody: ServiceVOIPGroupAddEdit2) -> RequestBuilder<ServiceDocGroupGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/group/{groupID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let groupIDPreEscape = "\(APIHelper.mapValueToPathItem(groupID))"
        let groupIDPostEscape = groupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{groupID}", with: groupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocGroupGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Group
     
     - parameter accountID: (path) Account ID 
     - parameter group: (body) group fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDGroupPost(accountID: String, group: ServiceVOIPGroupAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocGroupGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDGroupPostWithRequestBuilder(accountID: accountID, group: group).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Group
     - POST /v1/account/{accountID}/group
     - Provide an additional resource by adding a group list to an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID 
     - parameter group: (body) group fields 
     - returns: RequestBuilder<ServiceDocGroupGetSingle> 
     */
    open class func v1AccountAccountIDGroupPostWithRequestBuilder(accountID: String, group: ServiceVOIPGroupAddEdit2) -> RequestBuilder<ServiceDocGroupGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/group"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: group)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocGroupGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
