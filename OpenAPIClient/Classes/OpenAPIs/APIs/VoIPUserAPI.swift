//
// VoIPUserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VoIPUserAPI {

    /**
     Get User List
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserGet(accountid: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsUserGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserGetWithRequestBuilder(accountid: accountid, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User List
     - GET /v1/account/{accountid}/user
     - Get a list of all VoIP users that includes first and last names, email addresses, extensions, and account statuses.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsUserGetAll> 
     */
    open class func v1AccountAccountidUserGetWithRequestBuilder(accountid: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsUserGetAll> {
        var localVariablePath = "/v1/account/{accountid}/user"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsUserGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create User
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter user: (body) user fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserPost(accountid: String, user: ServiceVOIPUserAdd2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserPostWithRequestBuilder(accountid: accountid, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create User
     - POST /v1/account/{accountid}/user
     - Add new users to the account. When a user is added, the system generates their unique 32 alpha numeric ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter user: (body) user fields 
     - returns: RequestBuilder<ServiceDocsUserGetSingle> 
     */
    open class func v1AccountAccountidUserPostWithRequestBuilder(accountid: String, user: ServiceVOIPUserAdd2) -> RequestBuilder<ServiceDocsUserGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/user"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete User
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserUseridDelete(accountid: String, userid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserUseridDeleteWithRequestBuilder(accountid: accountid, userid: userid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete User
     - DELETE /v1/account/{accountid}/user/{userid}
     - Delete VoIP user access to maintain the security of your accounts.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsUserGetSingle> 
     */
    open class func v1AccountAccountidUserUseridDeleteWithRequestBuilder(accountid: String, userid: String) -> RequestBuilder<ServiceDocsUserGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/user/{userid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let useridPreEscape = "\(APIHelper.mapValueToPathItem(userid))"
        let useridPostEscape = useridPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userid}", with: useridPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get User Details
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserUseridGet(accountid: String, userid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserUseridGetWithRequestBuilder(accountid: accountid, userid: userid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User Details
     - GET /v1/account/{accountid}/user/{userid}
     - View specific user details.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsUserGetSingle> 
     */
    open class func v1AccountAccountidUserUseridGetWithRequestBuilder(accountid: String, userid: String) -> RequestBuilder<ServiceDocsUserGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/user/{userid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let useridPreEscape = "\(APIHelper.mapValueToPathItem(userid))"
        let useridPostEscape = useridPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userid}", with: useridPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update User
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter user: (body) user fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserUseridPut(accountid: String, userid: String, user: ServiceVOIPUserAdd2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserUseridPutWithRequestBuilder(accountid: accountid, userid: userid, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update User
     - PUT /v1/account/{accountid}/user/{userid}
     - Keep user information current. Modify the first and last name, extension, and other pertinent information.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter user: (body) user fields 
     - returns: RequestBuilder<ServiceDocsUserGetSingle> 
     */
    open class func v1AccountAccountidUserUseridPutWithRequestBuilder(accountid: String, userid: String, user: ServiceVOIPUserAdd2) -> RequestBuilder<ServiceDocsUserGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/user/{userid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let useridPreEscape = "\(APIHelper.mapValueToPathItem(userid))"
        let useridPostEscape = useridPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userid}", with: useridPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Impersonate a User
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter user: (body) Payload for impersonate a user 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidUserUseridUserauthPost(accountid: String, userid: String, user: ServiceVOIPImpersonateUser, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsImpersonateUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidUserUseridUserauthPostWithRequestBuilder(accountid: accountid, userid: userid, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Impersonate a User
     - POST /v1/account/{accountid}/user/{userid}/userauth
     - Retrieve a token for making presence calls.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter userid: (path) User ID, 32 alpha numeric 
     - parameter user: (body) Payload for impersonate a user 
     - returns: RequestBuilder<ServiceDocsImpersonateUserGetSingle> 
     */
    open class func v1AccountAccountidUserUseridUserauthPostWithRequestBuilder(accountid: String, userid: String, user: ServiceVOIPImpersonateUser) -> RequestBuilder<ServiceDocsImpersonateUserGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/user/{userid}/userauth"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let useridPreEscape = "\(APIHelper.mapValueToPathItem(userid))"
        let useridPostEscape = useridPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userid}", with: useridPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsImpersonateUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
