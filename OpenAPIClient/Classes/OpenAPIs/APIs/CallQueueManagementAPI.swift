//
// CallQueueManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CallQueueManagementAPI {

    /**
     Get Call Queues
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueueGet(accountID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueueGetWithRequestBuilder(accountID: accountID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Call Queues
     - GET /v1/account/{accountID}/callqueue
     - Retrieve call queue details for an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsCallQueueGetAll> 
     */
    open class func v1AccountAccountIDCallqueueGetWithRequestBuilder(accountID: String) -> RequestBuilder<ServiceDocsCallQueueGetAll> {
        var localVariablePath = "/v1/account/{accountID}/callqueue"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Call Queue
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueuePost(accountID: String, reqBody: ServiceVOIPCallQueueAddEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueuePostWithRequestBuilder(accountID: accountID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Call Queue
     - POST /v1/account/{accountID}/callqueue
     - Set up a call queue in an account for specific inbound calls.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsCallQueueGetSingle> 
     */
    open class func v1AccountAccountIDCallqueuePostWithRequestBuilder(accountID: String, reqBody: ServiceVOIPCallQueueAddEditData) -> RequestBuilder<ServiceDocsCallQueueGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/callqueue"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Call Queue
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueueQueueIDDelete(accountID: String, queueID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueueQueueIDDeleteWithRequestBuilder(accountID: accountID, queueID: queueID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Call Queue
     - DELETE /v1/account/{accountID}/callqueue/{queueID}
     - Remove the call queue from an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsCallQueueGetSingle> 
     */
    open class func v1AccountAccountIDCallqueueQueueIDDeleteWithRequestBuilder(accountID: String, queueID: String) -> RequestBuilder<ServiceDocsCallQueueGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/callqueue/{queueID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let queueIDPreEscape = "\(APIHelper.mapValueToPathItem(queueID))"
        let queueIDPostEscape = queueIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{queueID}", with: queueIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Call Queue Details
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueueQueueIDGet(accountID: String, queueID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueueQueueIDGetWithRequestBuilder(accountID: accountID, queueID: queueID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Call Queue Details
     - GET /v1/account/{accountID}/callqueue/{queueID}
     - Capture metadata about a specific queue, such as queue_type and agent_wrapup_time.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsCallQueueGetSingle> 
     */
    open class func v1AccountAccountIDCallqueueQueueIDGetWithRequestBuilder(accountID: String, queueID: String) -> RequestBuilder<ServiceDocsCallQueueGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/callqueue/{queueID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let queueIDPreEscape = "\(APIHelper.mapValueToPathItem(queueID))"
        let queueIDPostEscape = queueIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{queueID}", with: queueIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Call Queue
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueueQueueIDPut(accountID: String, queueID: String, reqBody: ServiceVOIPCallQueueAddEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueueQueueIDPutWithRequestBuilder(accountID: accountID, queueID: queueID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Call Queue
     - PUT /v1/account/{accountID}/callqueue/{queueID}
     - Update the metadata mentioned above.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsCallQueueGetSingle> 
     */
    open class func v1AccountAccountIDCallqueueQueueIDPutWithRequestBuilder(accountID: String, queueID: String, reqBody: ServiceVOIPCallQueueAddEditData) -> RequestBuilder<ServiceDocsCallQueueGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/callqueue/{queueID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let queueIDPreEscape = "\(APIHelper.mapValueToPathItem(queueID))"
        let queueIDPostEscape = queueIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{queueID}", with: queueIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Call Queue Status
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDCallqueueQueueIDStatusGet(accountID: String, queueID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetSingleStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDCallqueueQueueIDStatusGetWithRequestBuilder(accountID: accountID, queueID: queueID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Call Queue Status
     - GET /v1/account/{accountID}/callqueue/{queueID}/status
     - Access the status of a call queue in an account, such as the number of available agents (recipients), estimated wait time, and number of active sessions.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsCallQueueGetSingleStatus> 
     */
    open class func v1AccountAccountIDCallqueueQueueIDStatusGetWithRequestBuilder(accountID: String, queueID: String) -> RequestBuilder<ServiceDocsCallQueueGetSingleStatus> {
        var localVariablePath = "/v1/account/{accountID}/callqueue/{queueID}/status"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let queueIDPreEscape = "\(APIHelper.mapValueToPathItem(queueID))"
        let queueIDPostEscape = queueIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{queueID}", with: queueIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetSingleStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Queue Roles of Account
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDQueuerolesGet(accountID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCallQueueGetRoles?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDQueuerolesGetWithRequestBuilder(accountID: accountID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Queue Roles of Account
     - GET /v1/account/{accountID}/queueroles
     - Obtain data about each queue role in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsCallQueueGetRoles> 
     */
    open class func v1AccountAccountIDQueuerolesGetWithRequestBuilder(accountID: String) -> RequestBuilder<ServiceDocsCallQueueGetRoles> {
        var localVariablePath = "/v1/account/{accountID}/queueroles"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCallQueueGetRoles>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Assign Queue Role to Call Queue
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDQueuerolesQueueIDPost(accountID: String, queueID: String, reqBody: ServiceVOIPCallQueueRoleAssignData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceAPIResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDQueuerolesQueueIDPostWithRequestBuilder(accountID: accountID, queueID: queueID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Assign Queue Role to Call Queue
     - POST /v1/account/{accountID}/queueroles/{queueID}
     - Assign roles to members in a call queue.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter queueID: (path) Queue ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceAPIResponse> 
     */
    open class func v1AccountAccountIDQueuerolesQueueIDPostWithRequestBuilder(accountID: String, queueID: String, reqBody: ServiceVOIPCallQueueRoleAssignData) -> RequestBuilder<ServiceAPIResponse> {
        var localVariablePath = "/v1/account/{accountID}/queueroles/{queueID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let queueIDPreEscape = "\(APIHelper.mapValueToPathItem(queueID))"
        let queueIDPostEscape = queueIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{queueID}", with: queueIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceAPIResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
