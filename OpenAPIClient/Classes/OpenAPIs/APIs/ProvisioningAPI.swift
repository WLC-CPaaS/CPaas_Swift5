//
// ProvisioningAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProvisioningAPI {

    /**
     Get Config File Details
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter filename: (path) Name of config file 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDProvisionFilenameGet(accountID: String, filename: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDProvisionFilenameGetWithRequestBuilder(accountID: accountID, filename: filename).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Config File Details
     - GET /v1/account/{accountID}/provision/{filename}
     - Retrieve the configuration details (e.g., settings and parameters) for a device.
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter filename: (path) Name of config file 
     - returns: RequestBuilder<URL> 
     */
    open class func v1AccountAccountIDProvisionFilenameGetWithRequestBuilder(accountID: String, filename: String) -> RequestBuilder<URL> {
        var localVariablePath = "/v1/account/{accountID}/provision/{filename}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let filenamePreEscape = "\(APIHelper.mapValueToPathItem(filename))"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{filename}", with: filenamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get Family Details
     
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyFamilyGet(brand: String, family: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsFamilyOutputSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyFamilyGetWithRequestBuilder(brand: brand, family: family).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Family Details
     - GET /v1/ap/brand/{brand}/family/{family}
     - Retrieve a family's details by the randomly generated ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - returns: RequestBuilder<ProvisioningDocsDocsFamilyOutputSingle> 
     */
    open class func v1ApBrandBrandFamilyFamilyGetWithRequestBuilder(brand: String, family: String) -> RequestBuilder<ProvisioningDocsDocsFamilyOutputSingle> {
        var localVariablePath = "/v1/ap/brand/{brand}/family/{family}"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let familyPreEscape = "\(APIHelper.mapValueToPathItem(family))"
        let familyPostEscape = familyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{family}", with: familyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsFamilyOutputSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_v1ApBrandBrandFamilyFamilyModelGet: String, CaseIterable {
        case active = "active"
        case inactive = "inactive"
    }

    /**
     Get Model List
     
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter modelName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyFamilyModelGet(brand: String, family: String, modelName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyFamilyModelGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsModelOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyFamilyModelGetWithRequestBuilder(brand: brand, family: family, modelName: modelName, pageSize: pageSize, startKey: startKey, status: status).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Model List
     - GET /v1/ap/brand/{brand}/family/{family}/model
     - Retrieve a list of all models within a family for a brand (e.g., Yealink and Polycom).
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter modelName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<ProvisioningDocsDocsModelOutput> 
     */
    open class func v1ApBrandBrandFamilyFamilyModelGetWithRequestBuilder(brand: String, family: String, modelName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyFamilyModelGet? = nil) -> RequestBuilder<ProvisioningDocsDocsModelOutput> {
        var localVariablePath = "/v1/ap/brand/{brand}/family/{family}/model"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let familyPreEscape = "\(APIHelper.mapValueToPathItem(family))"
        let familyPostEscape = familyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{family}", with: familyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "model_name": (wrappedValue: modelName?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsModelOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Model Details
     
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyFamilyModelModelGet(brand: String, family: String, model: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsModelOutputSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyFamilyModelModelGetWithRequestBuilder(brand: brand, family: family, model: model).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Model Details
     - GET /v1/ap/brand/{brand}/family/{family}/model/{model}
     - Retrieve a model's details by the randomly generated ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - returns: RequestBuilder<ProvisioningDocsDocsModelOutputSingle> 
     */
    open class func v1ApBrandBrandFamilyFamilyModelModelGetWithRequestBuilder(brand: String, family: String, model: String) -> RequestBuilder<ProvisioningDocsDocsModelOutputSingle> {
        var localVariablePath = "/v1/ap/brand/{brand}/family/{family}/model/{model}"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let familyPreEscape = "\(APIHelper.mapValueToPathItem(family))"
        let familyPostEscape = familyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{family}", with: familyPostEscape, options: .literal, range: nil)
        let modelPreEscape = "\(APIHelper.mapValueToPathItem(model))"
        let modelPostEscape = modelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{model}", with: modelPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsModelOutputSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_v1ApBrandBrandFamilyFamilyModelModelTemplateGet: String, CaseIterable {
        case active = "active"
        case inactive = "inactive"
    }

    /**
     Get Template List
     
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - parameter firmware: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter templateName: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyFamilyModelModelTemplateGet(brand: String, family: String, model: String, firmware: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyFamilyModelModelTemplateGet? = nil, templateName: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsTemplatesOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithRequestBuilder(brand: brand, family: family, model: model, firmware: firmware, pageSize: pageSize, startKey: startKey, status: status, templateName: templateName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Template List
     - GET /v1/ap/brand/{brand}/family/{family}/model/{model}/template
     - Retrieve a list of all templates for a model within a brand (e.g., Yealink and Polycom).
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - parameter firmware: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter templateName: (query)  (optional)
     - returns: RequestBuilder<ProvisioningDocsDocsTemplatesOutput> 
     */
    open class func v1ApBrandBrandFamilyFamilyModelModelTemplateGetWithRequestBuilder(brand: String, family: String, model: String, firmware: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyFamilyModelModelTemplateGet? = nil, templateName: String? = nil) -> RequestBuilder<ProvisioningDocsDocsTemplatesOutput> {
        var localVariablePath = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let familyPreEscape = "\(APIHelper.mapValueToPathItem(family))"
        let familyPostEscape = familyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{family}", with: familyPostEscape, options: .literal, range: nil)
        let modelPreEscape = "\(APIHelper.mapValueToPathItem(model))"
        let modelPostEscape = modelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{model}", with: modelPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firmware": (wrappedValue: firmware?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: false),
            "template_name": (wrappedValue: templateName?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsTemplatesOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Template Details
     
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - parameter template: (path) template 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGet(brand: String, family: String, model: String, template: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsTemplateOutputSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithRequestBuilder(brand: brand, family: family, model: model, template: template).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Template Details
     - GET /v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}
     - Retrieve details about a template for a model by the randomly generated ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter family: (path) family 
     - parameter model: (path) model 
     - parameter template: (path) template 
     - returns: RequestBuilder<ProvisioningDocsDocsTemplateOutputSingle> 
     */
    open class func v1ApBrandBrandFamilyFamilyModelModelTemplateTemplateGetWithRequestBuilder(brand: String, family: String, model: String, template: String) -> RequestBuilder<ProvisioningDocsDocsTemplateOutputSingle> {
        var localVariablePath = "/v1/ap/brand/{brand}/family/{family}/model/{model}/template/{template}"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let familyPreEscape = "\(APIHelper.mapValueToPathItem(family))"
        let familyPostEscape = familyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{family}", with: familyPostEscape, options: .literal, range: nil)
        let modelPreEscape = "\(APIHelper.mapValueToPathItem(model))"
        let modelPostEscape = modelPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{model}", with: modelPostEscape, options: .literal, range: nil)
        let templatePreEscape = "\(APIHelper.mapValueToPathItem(template))"
        let templatePostEscape = templatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{template}", with: templatePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsTemplateOutputSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_v1ApBrandBrandFamilyGet: String, CaseIterable {
        case active = "active"
        case inactive = "inactive"
    }

    /**
     Get Family List
     
     - parameter brand: (path) brand 
     - parameter familyName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandFamilyGet(brand: String, familyName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsFamilyOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandFamilyGetWithRequestBuilder(brand: brand, familyName: familyName, pageSize: pageSize, startKey: startKey, status: status).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Family List
     - GET /v1/ap/brand/{brand}/family
     - Retrieve a list of all families for a brand (e.g., Yealink and Polycom).
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand 
     - parameter familyName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<ProvisioningDocsDocsFamilyOutput> 
     */
    open class func v1ApBrandBrandFamilyGetWithRequestBuilder(brand: String, familyName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandBrandFamilyGet? = nil) -> RequestBuilder<ProvisioningDocsDocsFamilyOutput> {
        var localVariablePath = "/v1/ap/brand/{brand}/family"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "family_name": (wrappedValue: familyName?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsFamilyOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Brand Details
     
     - parameter brand: (path) brand id to retrieve a brand 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandBrandGet(brand: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsBrandOutputSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandBrandGetWithRequestBuilder(brand: brand).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Brand Details
     - GET /v1/ap/brand/{brand}
     - Retrieve a brand's details by the randomly generated ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brand: (path) brand id to retrieve a brand 
     - returns: RequestBuilder<ProvisioningDocsDocsBrandOutputSingle> 
     */
    open class func v1ApBrandBrandGetWithRequestBuilder(brand: String) -> RequestBuilder<ProvisioningDocsDocsBrandOutputSingle> {
        var localVariablePath = "/v1/ap/brand/{brand}"
        let brandPreEscape = "\(APIHelper.mapValueToPathItem(brand))"
        let brandPostEscape = brandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{brand}", with: brandPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsBrandOutputSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_v1ApBrandGet: String, CaseIterable {
        case active = "active"
        case inactive = "inactive"
    }

    /**
     Get Brand List
     
     - parameter brandName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApBrandGet(brandName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandGet? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsBrandsOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApBrandGetWithRequestBuilder(brandName: brandName, pageSize: pageSize, startKey: startKey, status: status).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Brand List
     - GET /v1/ap/brand
     - Retrieve a list of all brands (e.g., Yealink and Polycom) by client.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter brandName: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter startKey: (query)  (optional)
     - parameter status: (query)  (optional)
     - returns: RequestBuilder<ProvisioningDocsDocsBrandsOutput> 
     */
    open class func v1ApBrandGetWithRequestBuilder(brandName: String? = nil, pageSize: Int? = nil, startKey: String? = nil, status: Status_v1ApBrandGet? = nil) -> RequestBuilder<ProvisioningDocsDocsBrandsOutput> {
        let localVariablePath = "/v1/ap/brand"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "brand_name": (wrappedValue: brandName?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsBrandsOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate Config File
     
     - parameter params: (body) body params to generate config file 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1ApConfigfileGeneratePost(params: ModelsGenerateConfigFileRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProvisioningDocsDocsConfigFileOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1ApConfigfileGeneratePostWithRequestBuilder(params: params).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Config File
     - POST /v1/ap/configfile/generate
     - Generate a configuration file that includes a list of parameters passed to the specified template_id in the request payload, with populated values returned in the response.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter params: (body) body params to generate config file 
     - returns: RequestBuilder<ProvisioningDocsDocsConfigFileOutput> 
     */
    open class func v1ApConfigfileGeneratePostWithRequestBuilder(params: ModelsGenerateConfigFileRequest) -> RequestBuilder<ProvisioningDocsDocsConfigFileOutput> {
        let localVariablePath = "/v1/ap/configfile/generate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: params)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProvisioningDocsDocsConfigFileOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
