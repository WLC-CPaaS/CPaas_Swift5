//
// TemporalRuleAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TemporalRuleAPI {

    /**
     Get Temporal Rule List
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalruleGet(accountID: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalruleGetWithRequestBuilder(accountID: accountID, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Temporal Rule List
     - GET /v1/account/{accountID}/temporalrule
     - Access all temporal rules for an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsTemporalRuleGetAll> 
     */
    open class func v1AccountAccountIDTemporalruleGetWithRequestBuilder(accountID: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsTemporalRuleGetAll> {
        var localVariablePath = "/v1/account/{accountID}/temporalrule"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Temporal Rule
     
     - parameter accountID: (path) Account ID, 32 alphanumeric 
     - parameter temporalrule: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulePost(accountID: String, temporalrule: ServiceVOIPTemporalRuleAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulePostWithRequestBuilder(accountID: accountID, temporalrule: temporalrule).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Temporal Rule
     - POST /v1/account/{accountID}/temporalrule
     - Create temporal rules for an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alphanumeric 
     - parameter temporalrule: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsTemporalRuleGetSingle> 
     */
    open class func v1AccountAccountIDTemporalrulePostWithRequestBuilder(accountID: String, temporalrule: ServiceVOIPTemporalRuleAddEdit2) -> RequestBuilder<ServiceDocsTemporalRuleGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalrule"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: temporalrule)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Temporal Rule
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) temporal rule ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDDelete(accountID: String, temporalRuleID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithRequestBuilder(accountID: accountID, temporalRuleID: temporalRuleID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Temporal Rule
     - DELETE /v1/account/{accountID}/temporalrule/{temporalRuleID}
     - Remove a temporal rule from an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) temporal rule ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsTemporalRuleGetSingle> 
     */
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDDeleteWithRequestBuilder(accountID: String, temporalRuleID: String) -> RequestBuilder<ServiceDocsTemporalRuleGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleID))"
        let temporalRuleIDPostEscape = temporalRuleIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleID}", with: temporalRuleIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Temporal Rule Details
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) Temporal Rule ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDGet(accountID: String, temporalRuleID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalruleTemporalRuleIDGetWithRequestBuilder(accountID: accountID, temporalRuleID: temporalRuleID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Temporal Rule Details
     - GET /v1/account/{accountID}/temporalrule/{temporalRuleID}
     - View details about individual time rules.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) Temporal Rule ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsTemporalRuleGetSingle> 
     */
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDGetWithRequestBuilder(accountID: String, temporalRuleID: String) -> RequestBuilder<ServiceDocsTemporalRuleGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleID))"
        let temporalRuleIDPostEscape = temporalRuleIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleID}", with: temporalRuleIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Temporal Rule
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) Temporal Rule ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDPut(accountID: String, temporalRuleID: String, reqBody: ServiceVOIPTemporalRuleAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalruleTemporalRuleIDPutWithRequestBuilder(accountID: accountID, temporalRuleID: temporalRuleID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Temporal Rule
     - PUT /v1/account/{accountID}/temporalrule/{temporalRuleID}
     - Edit the existing temporal rules in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleID: (path) Temporal Rule ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsTemporalRuleGetSingle> 
     */
    open class func v1AccountAccountIDTemporalruleTemporalRuleIDPutWithRequestBuilder(accountID: String, temporalRuleID: String, reqBody: ServiceVOIPTemporalRuleAddEdit2) -> RequestBuilder<ServiceDocsTemporalRuleGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalrule/{temporalRuleID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleID))"
        let temporalRuleIDPostEscape = temporalRuleIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleID}", with: temporalRuleIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
