//
// DeviceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeviceAPI {

    /**
     Delete Device
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceDeviceidDelete(accountid: String, deviceid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceDeviceidDeleteWithRequestBuilder(accountid: accountid, deviceid: deviceid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Device
     - DELETE /v1/account/{accountid}/device/{deviceid}
     - Remove one device from a CPaaS account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsDeviceGetSingle> 
     */
    open class func v1AccountAccountidDeviceDeviceidDeleteWithRequestBuilder(accountid: String, deviceid: String) -> RequestBuilder<ServiceDocsDeviceGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/device/{deviceid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let deviceidPreEscape = "\(APIHelper.mapValueToPathItem(deviceid))"
        let deviceidPostEscape = deviceidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceid}", with: deviceidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Device Details
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceDeviceidGet(accountid: String, deviceid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceDeviceidGetWithRequestBuilder(accountid: accountid, deviceid: deviceid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Device Details
     - GET /v1/account/{accountid}/device/{deviceid}
     - Permit a user to view specific device details.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsDeviceGetSingle> 
     */
    open class func v1AccountAccountidDeviceDeviceidGetWithRequestBuilder(accountid: String, deviceid: String) -> RequestBuilder<ServiceDocsDeviceGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/device/{deviceid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let deviceidPreEscape = "\(APIHelper.mapValueToPathItem(deviceid))"
        let deviceidPostEscape = deviceidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceid}", with: deviceidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Device
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - parameter device: (body) device fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceDeviceidPut(accountid: String, deviceid: String, device: ServiceVOIPDeviceAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceDeviceidPutWithRequestBuilder(accountid: accountid, deviceid: deviceid, device: device).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Device
     - PUT /v1/account/{accountid}/device/{deviceid}
     - Edit specifics about the device, such as the device type, name, and owner.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - parameter device: (body) device fields 
     - returns: RequestBuilder<ServiceDocsDeviceGetSingle> 
     */
    open class func v1AccountAccountidDeviceDeviceidPutWithRequestBuilder(accountid: String, deviceid: String, device: ServiceVOIPDeviceAddEdit2) -> RequestBuilder<ServiceDocsDeviceGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/device/{deviceid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let deviceidPreEscape = "\(APIHelper.mapValueToPathItem(deviceid))"
        let deviceidPostEscape = deviceidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceid}", with: deviceidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: device)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reboot Device
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceDeviceidRebootPost(accountid: String, deviceid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceReboot?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceDeviceidRebootPostWithRequestBuilder(accountid: accountid, deviceid: deviceid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reboot Device
     - POST /v1/account/{accountid}/device/{deviceid}/reboot
     - Reboot a device in an account to mitigate malware and improve device performance.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter deviceid: (path) Device ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsDeviceReboot> 
     */
    open class func v1AccountAccountidDeviceDeviceidRebootPostWithRequestBuilder(accountid: String, deviceid: String) -> RequestBuilder<ServiceDocsDeviceReboot> {
        var localVariablePath = "/v1/account/{accountid}/device/{deviceid}/reboot"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let deviceidPreEscape = "\(APIHelper.mapValueToPathItem(deviceid))"
        let deviceidPostEscape = deviceidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{deviceid}", with: deviceidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceReboot>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Device List
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceGet(accountid: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceGetWithRequestBuilder(accountid: accountid, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Device List
     - GET /v1/account/{accountid}/device
     - Obtain a list of all devices associated with an account such as fax machines, cell phones, and soft phones.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsDeviceGetAll> 
     */
    open class func v1AccountAccountidDeviceGetWithRequestBuilder(accountid: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsDeviceGetAll> {
        var localVariablePath = "/v1/account/{accountid}/device"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Device
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter device: (body) device fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDevicePost(accountid: String, device: ServiceVOIPDeviceAddEdit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDevicePostWithRequestBuilder(accountid: accountid, device: device).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Device
     - POST /v1/account/{accountid}/device
     - Connect a new device to an account to enhance communication methods.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter device: (body) device fields 
     - returns: RequestBuilder<ServiceDocsDeviceGetSingle> 
     */
    open class func v1AccountAccountidDevicePostWithRequestBuilder(accountid: String, device: ServiceVOIPDeviceAddEdit2) -> RequestBuilder<ServiceDocsDeviceGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/device"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: device)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Device Status
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDeviceStatusGet(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsDeviceStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeviceStatusGetWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Device Status
     - GET /v1/account/{accountid}/device/status
     - Retrieve a device’s status (e.g., registered or not registered) in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsDeviceStatus> 
     */
    open class func v1AccountAccountidDeviceStatusGetWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsDeviceStatus> {
        var localVariablePath = "/v1/account/{accountid}/device/status"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsDeviceStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
