//
// TemporalRuleSetAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TemporalRuleSetAPI {

    /**
     Get Temporal Rule Set List
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulesetGet(accountID: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleSetGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulesetGetWithRequestBuilder(accountID: accountID, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Temporal Rule Set List
     - GET /v1/account/{accountID}/temporalruleset
     - Access the temporal rule set list in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsTemporalRuleSetGetAll> 
     */
    open class func v1AccountAccountIDTemporalrulesetGetWithRequestBuilder(accountID: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsTemporalRuleSetGetAll> {
        var localVariablePath = "/v1/account/{accountID}/temporalruleset"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleSetGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Temporal Rule Set
     
     - parameter accountID: (path) Account ID, 32 alphanumeric 
     - parameter temporalruleset: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulesetPost(accountID: String, temporalruleset: ServiceVOIPTemporalRuleSetAddEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleSetGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulesetPostWithRequestBuilder(accountID: accountID, temporalruleset: temporalruleset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Temporal Rule Set
     - POST /v1/account/{accountID}/temporalruleset
     - Develop a new temporal rule set for an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alphanumeric 
     - parameter temporalruleset: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> 
     */
    open class func v1AccountAccountIDTemporalrulesetPostWithRequestBuilder(accountID: String, temporalruleset: ServiceVOIPTemporalRuleSetAddEditData) -> RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalruleset"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: temporalruleset)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Temporal Rule Set
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) temporal rule set ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDelete(accountID: String, temporalRuleSetID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleSetGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteWithRequestBuilder(accountID: accountID, temporalRuleSetID: temporalRuleSetID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Temporal Rule Set
     - DELETE /v1/account/{accountID}/temporalruleset/{temporalRuleSetID}
     - Delete the temporal rule set from an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) temporal rule set ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> 
     */
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDDeleteWithRequestBuilder(accountID: String, temporalRuleSetID: String) -> RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleSetIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleSetID))"
        let temporalRuleSetIDPostEscape = temporalRuleSetIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleSetID}", with: temporalRuleSetIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Temporal Rule Set Details
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) Temporal Ruleset ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGet(accountID: String, temporalRuleSetID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleSetGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetWithRequestBuilder(accountID: accountID, temporalRuleSetID: temporalRuleSetID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Temporal Rule Set Details
     - GET /v1/account/{accountID}/temporalruleset/{temporalRuleSetID}
     - Acquire details about a temporal rule set in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) Temporal Ruleset ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> 
     */
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDGetWithRequestBuilder(accountID: String, temporalRuleSetID: String) -> RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleSetIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleSetID))"
        let temporalRuleSetIDPostEscape = temporalRuleSetIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleSetID}", with: temporalRuleSetIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Temporal Rule Set
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) Temporal Ruleset ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPut(accountID: String, temporalRuleSetID: String, reqBody: ServiceVOIPTemporalRuleSetAddEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsTemporalRuleSetGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutWithRequestBuilder(accountID: accountID, temporalRuleSetID: temporalRuleSetID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Temporal Rule Set
     - PUT /v1/account/{accountID}/temporalruleset/{temporalRuleSetID}
     - Efficiently adjust the temporal rule set in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter temporalRuleSetID: (path) Temporal Ruleset ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> 
     */
    open class func v1AccountAccountIDTemporalrulesetTemporalRuleSetIDPutWithRequestBuilder(accountID: String, temporalRuleSetID: String, reqBody: ServiceVOIPTemporalRuleSetAddEditData) -> RequestBuilder<ServiceDocsTemporalRuleSetGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/temporalruleset/{temporalRuleSetID}"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let temporalRuleSetIDPreEscape = "\(APIHelper.mapValueToPathItem(temporalRuleSetID))"
        let temporalRuleSetIDPostEscape = temporalRuleSetIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{temporalRuleSetID}", with: temporalRuleSetIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsTemporalRuleSetGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
