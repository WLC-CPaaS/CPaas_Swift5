//
// SMSAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SMSAPI {

    /**

     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1SmsAccountAccountIDCampaignCampaignIDImportGet(accountID: String, campaignID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCampaignImportOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1SmsAccountAccountIDCampaignCampaignIDImportGetWithRequestBuilder(accountID: accountID, campaignID: campaignID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/sms/account/{accountID}/campaign/{campaignID}/import
     - Get details about a single imported campaign in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - returns: RequestBuilder<ServiceDocsCampaignImportOutput> 
     */
    open class func v1SmsAccountAccountIDCampaignCampaignIDImportGetWithRequestBuilder(accountID: String, campaignID: String) -> RequestBuilder<ServiceDocsCampaignImportOutput> {
        var localVariablePath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let campaignIDPreEscape = "\(APIHelper.mapValueToPathItem(campaignID))"
        let campaignIDPostEscape = campaignIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignID}", with: campaignIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCampaignImportOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1SmsAccountAccountIDCampaignCampaignIDImportPost(accountID: String, campaignID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCampaignImportOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1SmsAccountAccountIDCampaignCampaignIDImportPostWithRequestBuilder(accountID: accountID, campaignID: campaignID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /v1/sms/account/{accountID}/campaign/{campaignID}/import
     - Import campaign
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - returns: RequestBuilder<ServiceDocsCampaignImportOutput> 
     */
    open class func v1SmsAccountAccountIDCampaignCampaignIDImportPostWithRequestBuilder(accountID: String, campaignID: String) -> RequestBuilder<ServiceDocsCampaignImportOutput> {
        var localVariablePath = "/v1/sms/account/{accountID}/campaign/{campaignID}/import"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let campaignIDPreEscape = "\(APIHelper.mapValueToPathItem(campaignID))"
        let campaignIDPostEscape = campaignIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignID}", with: campaignIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCampaignImportOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - parameter pageNum: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGet(accountID: String, campaignID: String, pageNum: Double? = nil, pageSize: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCampaignPhoneNumberOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithRequestBuilder(accountID: accountID, campaignID: campaignID, pageNum: pageNum, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber
     - Get telephone numbers associated with a campaign.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID 
     - parameter pageNum: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - returns: RequestBuilder<ServiceDocsCampaignPhoneNumberOutput> 
     */
    open class func v1SmsAccountAccountIDCampaignCampaignIDPhonenumberGetWithRequestBuilder(accountID: String, campaignID: String, pageNum: Double? = nil, pageSize: Double? = nil) -> RequestBuilder<ServiceDocsCampaignPhoneNumberOutput> {
        var localVariablePath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let campaignIDPreEscape = "\(APIHelper.mapValueToPathItem(campaignID))"
        let campaignIDPostEscape = campaignIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignID}", with: campaignIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_num": (wrappedValue: pageNum?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCampaignPhoneNumberOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPut(accountID: String, campaignID: String, reqBody: ServiceCampaignTagDetagPhonenumbers, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCampaignTagDetagPhonenumbersOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithRequestBuilder(accountID: accountID, campaignID: campaignID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber
     - Associate or dissociate telephone numbers with a campaign.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter campaignID: (path) Campaign ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsCampaignTagDetagPhonenumbersOutput> 
     */
    open class func v1SmsAccountAccountIDCampaignCampaignIDPhonenumberPutWithRequestBuilder(accountID: String, campaignID: String, reqBody: ServiceCampaignTagDetagPhonenumbers) -> RequestBuilder<ServiceDocsCampaignTagDetagPhonenumbersOutput> {
        var localVariablePath = "/v1/sms/account/{accountID}/campaign/{campaignID}/phonenumber"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let campaignIDPreEscape = "\(APIHelper.mapValueToPathItem(campaignID))"
        let campaignIDPostEscape = campaignIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{campaignID}", with: campaignIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCampaignTagDetagPhonenumbersOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter pageNum: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1SmsAccountAccountIDCampaignImportGet(accountID: String, pageNum: Double? = nil, pageSize: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsCampaignImportedGetAllOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1SmsAccountAccountIDCampaignImportGetWithRequestBuilder(accountID: accountID, pageNum: pageNum, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/sms/account/{accountID}/campaign/import
     - Get a list of all imported campaigns in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter pageNum: (query) Page number (optional)
     - parameter pageSize: (query) Page size (optional)
     - returns: RequestBuilder<ServiceDocsCampaignImportedGetAllOutput> 
     */
    open class func v1SmsAccountAccountIDCampaignImportGetWithRequestBuilder(accountID: String, pageNum: Double? = nil, pageSize: Double? = nil) -> RequestBuilder<ServiceDocsCampaignImportedGetAllOutput> {
        var localVariablePath = "/v1/sms/account/{accountID}/campaign/import"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_num": (wrappedValue: pageNum?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsCampaignImportedGetAllOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
