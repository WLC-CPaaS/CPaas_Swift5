//
// AccountAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountAPI {

    /**
     Get Sub Account List
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidChildrenGet(accountid: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidChildrenGetWithRequestBuilder(accountid: accountid, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Sub Account List
     - GET /v1/account/{accountid}/children
     - Conveniently access the list of children accounts.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsAccountGetAll> 
     */
    open class func v1AccountAccountidChildrenGetWithRequestBuilder(accountid: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsAccountGetAll> {
        var localVariablePath = "/v1/account/{accountid}/children"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Account
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDelete(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDeleteWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Account
     - DELETE /v1/account/{accountid}
     - Delete an account within your organization.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidDeleteWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Account DNS Record
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDnsrecordGet(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDnsrecordGetWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account DNS Record
     - GET /v1/account/{accountid}/dnsrecord
     - Get the DNS record of an account from the Route 53 entry.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidDnsrecordGetWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/dnsrecord"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Account DNS Record
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDnsrecordPost(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDnsrecordPostWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Account DNS Record
     - POST /v1/account/{accountid}/dnsrecord
     - Create the DNS record of an account with the help realm in the Route 53 entry.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidDnsrecordPostWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/dnsrecord"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Convert Account DNS Record
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter dnsrecord: (body) record type fields with value SRV, CNAME 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidDnsrecordPut(accountid: String, dnsrecord: ServiceUpdateRecordTypeForAccount, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidDnsrecordPutWithRequestBuilder(accountid: accountid, dnsrecord: dnsrecord).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Convert Account DNS Record
     - PUT /v1/account/{accountid}/dnsrecord
     - Toggle the realm DNS record between srv and cname.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter dnsrecord: (body) record type fields with value SRV, CNAME 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidDnsrecordPutWithRequestBuilder(accountid: String, dnsrecord: ServiceUpdateRecordTypeForAccount) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/dnsrecord"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dnsrecord)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Account Details
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidGet(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidGetWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account Details
     - GET /v1/account/{accountid}
     - This endpoint will not allow for modifying or making updates, it will only allow users to view/retrieve details.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidGetWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Account Limits
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidLimitGet(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountLimit?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidLimitGetWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account Limits
     - GET /v1/account/{accountid}/limit
     - Check the maximum number of inbound, outbound, and two-way trunks.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountLimit> 
     */
    open class func v1AccountAccountidLimitGetWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountLimit> {
        var localVariablePath = "/v1/account/{accountid}/limit"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountLimit>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Set Account Limits
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter limit: (body) account fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidLimitPut(accountid: String, limit: ServiceVOIPAccountLimit2, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountLimit?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidLimitPutWithRequestBuilder(accountid: accountid, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set Account Limits
     - PUT /v1/account/{accountid}/limit
     - Apply parameters to restrict access to inbound, outbound, and two-way trunks.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter limit: (body) account fields 
     - returns: RequestBuilder<ServiceDocsAccountLimit> 
     */
    open class func v1AccountAccountidLimitPutWithRequestBuilder(accountid: String, limit: ServiceVOIPAccountLimit2) -> RequestBuilder<ServiceDocsAccountLimit> {
        var localVariablePath = "/v1/account/{accountid}/limit"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: limit)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountLimit>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Sub Account
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter account: (body) account fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidPost(accountid: String, account: ServiceVOIPAccountAddData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidPostWithRequestBuilder(accountid: accountid, account: account).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Sub Account
     - POST /v1/account/{accountid}
     - Establish a sub account to enable an administrator within your organization to create accounts.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter account: (body) account fields 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidPostWithRequestBuilder(accountid: String, account: ServiceVOIPAccountAddData) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: account)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Account Provisioning Details
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidProvisioningdetailsGet(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountProvisioning?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidProvisioningdetailsGetWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account Provisioning Details
     - GET /v1/account/{accountid}/provisioningdetails
     - Get the provisioning details of an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountProvisioning> 
     */
    open class func v1AccountAccountidProvisioningdetailsGetWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountProvisioning> {
        var localVariablePath = "/v1/account/{accountid}/provisioningdetails"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountProvisioning>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset the provisioning details password.
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidProvisioningdetailsResetpwPut(accountid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountProvisioning?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidProvisioningdetailsResetpwPutWithRequestBuilder(accountid: accountid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reset the provisioning details password.
     - PUT /v1/account/{accountid}/provisioningdetails/resetpw
     - Reset the existing provisioning details password and set it to a new one.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsAccountProvisioning> 
     */
    open class func v1AccountAccountidProvisioningdetailsResetpwPutWithRequestBuilder(accountid: String) -> RequestBuilder<ServiceDocsAccountProvisioning> {
        var localVariablePath = "/v1/account/{accountid}/provisioningdetails/resetpw"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountProvisioning>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update Account
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter account: (body) account fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidPut(accountid: String, account: ServiceVOIPAccountEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidPutWithRequestBuilder(accountid: accountid, account: account).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Account
     - PUT /v1/account/{accountid}
     - Modify pertinent account data.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter account: (body) account fields 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountAccountidPutWithRequestBuilder(accountid: String, account: ServiceVOIPAccountEditData) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        var localVariablePath = "/v1/account/{accountid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: account)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountApikeyGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountAPIKey?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountApikeyGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /v1/account/apikey
     - Authenticate an application or user request to get the client ID and client secret for a CPaaS account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - returns: RequestBuilder<ServiceDocsAccountAPIKey> 
     */
    open class func v1AccountApikeyGetWithRequestBuilder() -> RequestBuilder<ServiceDocsAccountAPIKey> {
        let localVariablePath = "/v1/account/apikey"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountAPIKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Account List
     
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountGet(startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountGetWithRequestBuilder(startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Account List
     - GET /v1/account
     - Retrieve a list of all CPaaS accounts that exist within your organization.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsAccountGetAll> 
     */
    open class func v1AccountGetWithRequestBuilder(startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsAccountGetAll> {
        let localVariablePath = "/v1/account"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Account
     
     - parameter account: (body) account fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountPost(account: ServiceVOIPAccountAddData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAccountGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountPostWithRequestBuilder(account: account).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Account
     - POST /v1/account
     - Create an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter account: (body) account fields 
     - returns: RequestBuilder<ServiceDocsAccountGetSingle> 
     */
    open class func v1AccountPostWithRequestBuilder(account: ServiceVOIPAccountAddData) -> RequestBuilder<ServiceDocsAccountGetSingle> {
        let localVariablePath = "/v1/account"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: account)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAccountGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
