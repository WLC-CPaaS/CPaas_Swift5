//
// CallQueueMembershipAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CallQueueMembershipAPI {

    /**
     Grant Queue Membership to User
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDQueuemembershipPost(accountID: String, reqBody: ServiceVOIPQueueMembershipAddData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsQueueMembershipOutput?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDQueuemembershipPostWithRequestBuilder(accountID: accountID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Grant Queue Membership to User
     - POST /v1/account/{accountID}/queuemembership
     - Allow users to create queue memberships for recipients.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsQueueMembershipOutput> 
     */
    open class func v1AccountAccountIDQueuemembershipPostWithRequestBuilder(accountID: String, reqBody: ServiceVOIPQueueMembershipAddData) -> RequestBuilder<ServiceDocsQueueMembershipOutput> {
        var localVariablePath = "/v1/account/{accountID}/queuemembership"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsQueueMembershipOutput>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Disable Queue Membership
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter recipientID: (path) Recipient ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDQueuemembershipRecipientIDDisablePost(accountID: String, recipientID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceAPIResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDQueuemembershipRecipientIDDisablePostWithRequestBuilder(accountID: accountID, recipientID: recipientID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable Queue Membership
     - POST /v1/account/{accountID}/queuemembership/{recipientID}/disable
     - Deactivate queue membership for a recipient.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter recipientID: (path) Recipient ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceAPIResponse> 
     */
    open class func v1AccountAccountIDQueuemembershipRecipientIDDisablePostWithRequestBuilder(accountID: String, recipientID: String) -> RequestBuilder<ServiceAPIResponse> {
        var localVariablePath = "/v1/account/{accountID}/queuemembership/{recipientID}/disable"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let recipientIDPreEscape = "\(APIHelper.mapValueToPathItem(recipientID))"
        let recipientIDPostEscape = recipientIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{recipientID}", with: recipientIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceAPIResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Enable Queue Membership
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter recipientID: (path) Recipient ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDQueuemembershipRecipientIDEnablePost(accountID: String, recipientID: String, reqBody: ServiceVOIPCallQueueEnableMembershipData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceAPIResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDQueuemembershipRecipientIDEnablePostWithRequestBuilder(accountID: accountID, recipientID: recipientID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable Queue Membership
     - POST /v1/account/{accountID}/queuemembership/{recipientID}/enable
     - Activate queue membership for a recipient.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter recipientID: (path) Recipient ID, 32 alpha numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceAPIResponse> 
     */
    open class func v1AccountAccountIDQueuemembershipRecipientIDEnablePostWithRequestBuilder(accountID: String, recipientID: String, reqBody: ServiceVOIPCallQueueEnableMembershipData) -> RequestBuilder<ServiceAPIResponse> {
        var localVariablePath = "/v1/account/{accountID}/queuemembership/{recipientID}/enable"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let recipientIDPreEscape = "\(APIHelper.mapValueToPathItem(recipientID))"
        let recipientIDPostEscape = recipientIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{recipientID}", with: recipientIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceAPIResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
