//
// MediaAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MediaAPI {

    /**
     Get Media File
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter mediaID: (path) Media ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDMediaMediaIDFileGet(accountID: String, mediaID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDMediaMediaIDFileGetWithRequestBuilder(accountID: accountID, mediaID: mediaID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Media File
     - GET /v1/account/{accountID}/media/{mediaID}/file
     - Gather data about the media objects in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter mediaID: (path) Media ID, 32 alpha numeric 
     - returns: RequestBuilder<URL> 
     */
    open class func v1AccountAccountIDMediaMediaIDFileGetWithRequestBuilder(accountID: String, mediaID: String) -> RequestBuilder<URL> {
        var localVariablePath = "/v1/account/{accountID}/media/{mediaID}/file"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let mediaIDPreEscape = "\(APIHelper.mapValueToPathItem(mediaID))"
        let mediaIDPostEscape = mediaIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mediaID}", with: mediaIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add Media File
     
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter mediaID: (path) Media ID, 32 alpha numeric 
     - parameter file: (form) Media file 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountIDMediaMediaIDFilePost(accountID: String, mediaID: String, file: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsMediaGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountIDMediaMediaIDFilePostWithRequestBuilder(accountID: accountID, mediaID: mediaID, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Media File
     - POST /v1/account/{accountID}/media/{mediaID}/file
     - Include a media file that is connected to a media object in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountID: (path) Account ID, 32 alpha numeric 
     - parameter mediaID: (path) Media ID, 32 alpha numeric 
     - parameter file: (form) Media file 
     - returns: RequestBuilder<ServiceDocsMediaGetSingle> 
     */
    open class func v1AccountAccountIDMediaMediaIDFilePostWithRequestBuilder(accountID: String, mediaID: String, file: URL) -> RequestBuilder<ServiceDocsMediaGetSingle> {
        var localVariablePath = "/v1/account/{accountID}/media/{mediaID}/file"
        let accountIDPreEscape = "\(APIHelper.mapValueToPathItem(accountID))"
        let accountIDPostEscape = accountIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountID}", with: accountIDPostEscape, options: .literal, range: nil)
        let mediaIDPreEscape = "\(APIHelper.mapValueToPathItem(mediaID))"
        let mediaIDPostEscape = mediaIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mediaID}", with: mediaIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsMediaGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Media List
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidMediaGet(accountid: String, startKey: String? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsMediaGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidMediaGetWithRequestBuilder(accountid: accountid, startKey: startKey, pageSize: pageSize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Media List
     - GET /v1/account/{accountid}/media
     - View all media files for an account in your organization.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter startKey: (query) start_key for pagination that was returned as next_start_key from your previous call (optional)
     - parameter pageSize: (query) number of records to return, range 1 to 50 (optional)
     - returns: RequestBuilder<ServiceDocsMediaGetAll> 
     */
    open class func v1AccountAccountidMediaGetWithRequestBuilder(accountid: String, startKey: String? = nil, pageSize: Int? = nil) -> RequestBuilder<ServiceDocsMediaGetAll> {
        var localVariablePath = "/v1/account/{accountid}/media"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsMediaGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Media
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter mediaid: (path) Device ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidMediaMediaidDelete(accountid: String, mediaid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsMediaGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidMediaMediaidDeleteWithRequestBuilder(accountid: accountid, mediaid: mediaid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Media
     - DELETE /v1/account/{accountid}/media/{mediaid}
     - Remove a media file that is no longer in use from an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter mediaid: (path) Device ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsMediaGetSingle> 
     */
    open class func v1AccountAccountidMediaMediaidDeleteWithRequestBuilder(accountid: String, mediaid: String) -> RequestBuilder<ServiceDocsMediaGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/media/{mediaid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let mediaidPreEscape = "\(APIHelper.mapValueToPathItem(mediaid))"
        let mediaidPostEscape = mediaidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mediaid}", with: mediaidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsMediaGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Media Details
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter mediaid: (path) Media ID, 32 alpha numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidMediaMediaidGet(accountid: String, mediaid: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsMediaGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidMediaMediaidGetWithRequestBuilder(accountid: accountid, mediaid: mediaid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Media Details
     - GET /v1/account/{accountid}/media/{mediaid}
     - Permit users to view an account's specific media information.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter mediaid: (path) Media ID, 32 alpha numeric 
     - returns: RequestBuilder<ServiceDocsMediaGetSingle> 
     */
    open class func v1AccountAccountidMediaMediaidGetWithRequestBuilder(accountid: String, mediaid: String) -> RequestBuilder<ServiceDocsMediaGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/media/{mediaid}"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let mediaidPreEscape = "\(APIHelper.mapValueToPathItem(mediaid))"
        let mediaidPostEscape = mediaidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mediaid}", with: mediaidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsMediaGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create Media
     
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter media: (body) Media creation or update payload 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1AccountAccountidMediaPost(accountid: String, media: ServiceVOIPMediaAddEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsMediaGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1AccountAccountidMediaPostWithRequestBuilder(accountid: accountid, media: media).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Media
     - POST /v1/account/{accountid}/media
     - Generate a media object to allow users to upload a media file in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter accountid: (path) Account ID, 32 alpha numeric 
     - parameter media: (body) Media creation or update payload 
     - returns: RequestBuilder<ServiceDocsMediaGetSingle> 
     */
    open class func v1AccountAccountidMediaPostWithRequestBuilder(accountid: String, media: ServiceVOIPMediaAddEditData) -> RequestBuilder<ServiceDocsMediaGetSingle> {
        var localVariablePath = "/v1/account/{accountid}/media"
        let accountidPreEscape = "\(APIHelper.mapValueToPathItem(accountid))"
        let accountidPostEscape = accountidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountid}", with: accountidPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: media)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsMediaGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
