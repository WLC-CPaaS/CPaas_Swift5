//
// CPaaSManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CPaaSManagementAPI {

    /**
     Get All CPaaS Users
     
     - parameter pageSize: (query) number of records to return, range 1 to 100 (optional)
     - parameter startKey: (query) unique to fetch next records (optional)
     - parameter sort: (query) sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)
     - parameter email: (query) Email (optional)
     - parameter role: (query) User Role (optional)
     - parameter firstName: (query) First Name (optional)
     - parameter lastName: (query) Last Name (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MgmtUserGet(pageSize: Int? = nil, startKey: String? = nil, sort: String? = nil, email: String? = nil, role: String? = nil, firstName: String? = nil, lastName: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAdminUserGetAll?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MgmtUserGetWithRequestBuilder(pageSize: pageSize, startKey: startKey, sort: sort, email: email, role: role, firstName: firstName, lastName: lastName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get All CPaaS Users
     - GET /v1/mgmt/user
     - Retrieve a list of all CPaaS users in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter pageSize: (query) number of records to return, range 1 to 100 (optional)
     - parameter startKey: (query) unique to fetch next records (optional)
     - parameter sort: (query) sorting the records by email(default)/role/first_name/last_name, _A is for ascending and _D is for descending, eg: sort&#x3D;role_A,email_D (optional)
     - parameter email: (query) Email (optional)
     - parameter role: (query) User Role (optional)
     - parameter firstName: (query) First Name (optional)
     - parameter lastName: (query) Last Name (optional)
     - returns: RequestBuilder<ServiceDocsAdminUserGetAll> 
     */
    open class func v1MgmtUserGetWithRequestBuilder(pageSize: Int? = nil, startKey: String? = nil, sort: String? = nil, email: String? = nil, role: String? = nil, firstName: String? = nil, lastName: String? = nil) -> RequestBuilder<ServiceDocsAdminUserGetAll> {
        let localVariablePath = "/v1/mgmt/user"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: false),
            "start_key": (wrappedValue: startKey?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "email": (wrappedValue: email?.encodeToJSON(), isExplode: false),
            "role": (wrappedValue: role?.encodeToJSON(), isExplode: false),
            "first_name": (wrappedValue: firstName?.encodeToJSON(), isExplode: false),
            "last_name": (wrappedValue: lastName?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAdminUserGetAll>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Invite CPaaS User
     
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MgmtUserPost(reqBody: ServiceAdminUserAddData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAdminUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MgmtUserPostWithRequestBuilder(reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Invite CPaaS User
     - POST /v1/mgmt/user
     - Link a new CPaaS user to an existing client account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsAdminUserGetSingle> 
     */
    open class func v1MgmtUserPostWithRequestBuilder(reqBody: ServiceAdminUserAddData) -> RequestBuilder<ServiceDocsAdminUserGetSingle> {
        let localVariablePath = "/v1/mgmt/user"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAdminUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete CPaaS User
     
     - parameter userID: (path) User ID, numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MgmtUserUserIDDelete(userID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAdminUserDelete?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MgmtUserUserIDDeleteWithRequestBuilder(userID: userID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete CPaaS User
     - DELETE /v1/mgmt/user/{userID}
     - Delete a CPaaS user from the associated account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter userID: (path) User ID, numeric 
     - returns: RequestBuilder<ServiceDocsAdminUserDelete> 
     */
    open class func v1MgmtUserUserIDDeleteWithRequestBuilder(userID: String) -> RequestBuilder<ServiceDocsAdminUserDelete> {
        var localVariablePath = "/v1/mgmt/user/{userID}"
        let userIDPreEscape = "\(APIHelper.mapValueToPathItem(userID))"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userID}", with: userIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAdminUserDelete>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get CPaaS User Details
     
     - parameter userID: (path) User ID, numeric 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MgmtUserUserIDGet(userID: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAdminUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MgmtUserUserIDGetWithRequestBuilder(userID: userID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get CPaaS User Details
     - GET /v1/mgmt/user/{userID}
     - View details about each CPaaS user in an account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter userID: (path) User ID, numeric 
     - returns: RequestBuilder<ServiceDocsAdminUserGetSingle> 
     */
    open class func v1MgmtUserUserIDGetWithRequestBuilder(userID: String) -> RequestBuilder<ServiceDocsAdminUserGetSingle> {
        var localVariablePath = "/v1/mgmt/user/{userID}"
        let userIDPreEscape = "\(APIHelper.mapValueToPathItem(userID))"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userID}", with: userIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAdminUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update CPaaS User Role
     
     - parameter userID: (path) User ID, numeric 
     - parameter reqBody: (body) payload fields 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func v1MgmtUserUserIDPut(userID: String, reqBody: ServiceAdminUserEditData, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceDocsAdminUserGetSingle?, _ error: Error?) -> Void)) -> RequestTask {
        return v1MgmtUserUserIDPutWithRequestBuilder(userID: userID, reqBody: reqBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update CPaaS User Role
     - PUT /v1/mgmt/user/{userID}
     - Update a CPaaS user's role within a client's account.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: BearerAuth
     - parameter userID: (path) User ID, numeric 
     - parameter reqBody: (body) payload fields 
     - returns: RequestBuilder<ServiceDocsAdminUserGetSingle> 
     */
    open class func v1MgmtUserUserIDPutWithRequestBuilder(userID: String, reqBody: ServiceAdminUserEditData) -> RequestBuilder<ServiceDocsAdminUserGetSingle> {
        var localVariablePath = "/v1/mgmt/user/{userID}"
        let userIDPreEscape = "\(APIHelper.mapValueToPathItem(userID))"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userID}", with: userIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reqBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceDocsAdminUserGetSingle>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
